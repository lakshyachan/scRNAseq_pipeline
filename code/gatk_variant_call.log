
Activating Modules:
  1) Java/11.0.2

Directory already exists: /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/data
Directory already exists: /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output
Starting Index Reference Genome: Indexes the reference genome using BWA.
[bwa_index] Pack FASTA... 17.45 sec
[bwa_index] Construct BWT for the packed sequence...
[BWTIncCreate] textLength=6274909010, availableWord=453525580
[BWTIncConstructFromPacked] 10 iterations done. 99999986 characters processed.
[BWTIncConstructFromPacked] 20 iterations done. 199999986 characters processed.
[BWTIncConstructFromPacked] 30 iterations done. 299999986 characters processed.
[BWTIncConstructFromPacked] 40 iterations done. 399999986 characters processed.
[BWTIncConstructFromPacked] 50 iterations done. 499999986 characters processed.
[BWTIncConstructFromPacked] 60 iterations done. 599999986 characters processed.
[BWTIncConstructFromPacked] 70 iterations done. 699999986 characters processed.
[BWTIncConstructFromPacked] 80 iterations done. 799999986 characters processed.
[BWTIncConstructFromPacked] 90 iterations done. 899999986 characters processed.
[BWTIncConstructFromPacked] 100 iterations done. 999999986 characters processed.
[BWTIncConstructFromPacked] 110 iterations done. 1099999986 characters processed.
[BWTIncConstructFromPacked] 120 iterations done. 1199999986 characters processed.
[BWTIncConstructFromPacked] 130 iterations done. 1299999986 characters processed.
[BWTIncConstructFromPacked] 140 iterations done. 1399999986 characters processed.
[BWTIncConstructFromPacked] 150 iterations done. 1499999986 characters processed.
[BWTIncConstructFromPacked] 160 iterations done. 1599999986 characters processed.
[BWTIncConstructFromPacked] 170 iterations done. 1699999986 characters processed.
[BWTIncConstructFromPacked] 180 iterations done. 1799999986 characters processed.
[BWTIncConstructFromPacked] 190 iterations done. 1899999986 characters processed.
[BWTIncConstructFromPacked] 200 iterations done. 1999999986 characters processed.
[BWTIncConstructFromPacked] 210 iterations done. 2099999986 characters processed.
[BWTIncConstructFromPacked] 220 iterations done. 2199999986 characters processed.
[BWTIncConstructFromPacked] 230 iterations done. 2299999986 characters processed.
[BWTIncConstructFromPacked] 240 iterations done. 2399999986 characters processed.
[BWTIncConstructFromPacked] 250 iterations done. 2499999986 characters processed.
[BWTIncConstructFromPacked] 260 iterations done. 2599999986 characters processed.
[BWTIncConstructFromPacked] 270 iterations done. 2699999986 characters processed.
[BWTIncConstructFromPacked] 280 iterations done. 2799999986 characters processed.
[BWTIncConstructFromPacked] 290 iterations done. 2899999986 characters processed.
[BWTIncConstructFromPacked] 300 iterations done. 2999999986 characters processed.
[BWTIncConstructFromPacked] 310 iterations done. 3099999986 characters processed.
[BWTIncConstructFromPacked] 320 iterations done. 3199999986 characters processed.
[BWTIncConstructFromPacked] 330 iterations done. 3299999986 characters processed.
[BWTIncConstructFromPacked] 340 iterations done. 3399999986 characters processed.
[BWTIncConstructFromPacked] 350 iterations done. 3499999986 characters processed.
[BWTIncConstructFromPacked] 360 iterations done. 3599999986 characters processed.
[BWTIncConstructFromPacked] 370 iterations done. 3699999986 characters processed.
[BWTIncConstructFromPacked] 380 iterations done. 3799999986 characters processed.
[BWTIncConstructFromPacked] 390 iterations done. 3899999986 characters processed.
[BWTIncConstructFromPacked] 400 iterations done. 3999999986 characters processed.
[BWTIncConstructFromPacked] 410 iterations done. 4099999986 characters processed.
[BWTIncConstructFromPacked] 420 iterations done. 4199999986 characters processed.
[BWTIncConstructFromPacked] 430 iterations done. 4299999986 characters processed.
[BWTIncConstructFromPacked] 440 iterations done. 4399999986 characters processed.
[BWTIncConstructFromPacked] 450 iterations done. 4499999986 characters processed.
[BWTIncConstructFromPacked] 460 iterations done. 4599999986 characters processed.
[BWTIncConstructFromPacked] 470 iterations done. 4699999986 characters processed.
[BWTIncConstructFromPacked] 480 iterations done. 4799999986 characters processed.
[BWTIncConstructFromPacked] 490 iterations done. 4899999986 characters processed.
[BWTIncConstructFromPacked] 500 iterations done. 4999999986 characters processed.
[BWTIncConstructFromPacked] 510 iterations done. 5099999986 characters processed.
[BWTIncConstructFromPacked] 520 iterations done. 5199999986 characters processed.
[BWTIncConstructFromPacked] 530 iterations done. 5299999986 characters processed.
[BWTIncConstructFromPacked] 540 iterations done. 5399999986 characters processed.
[BWTIncConstructFromPacked] 550 iterations done. 5499999986 characters processed.
[BWTIncConstructFromPacked] 560 iterations done. 5599999986 characters processed.
[BWTIncConstructFromPacked] 570 iterations done. 5694304802 characters processed.
[BWTIncConstructFromPacked] 580 iterations done. 5778119186 characters processed.
[BWTIncConstructFromPacked] 590 iterations done. 5852609618 characters processed.
[BWTIncConstructFromPacked] 600 iterations done. 5918812898 characters processed.
[BWTIncConstructFromPacked] 610 iterations done. 5977650514 characters processed.
[BWTIncConstructFromPacked] 620 iterations done. 6029941522 characters processed.
[BWTIncConstructFromPacked] 630 iterations done. 6076413890 characters processed.
[BWTIncConstructFromPacked] 640 iterations done. 6117714626 characters processed.
[BWTIncConstructFromPacked] 650 iterations done. 6154418802 characters processed.
[BWTIncConstructFromPacked] 660 iterations done. 6187037554 characters processed.
[BWTIncConstructFromPacked] 670 iterations done. 6216025154 characters processed.
[BWTIncConstructFromPacked] 680 iterations done. 6241785362 characters processed.
[BWTIncConstructFromPacked] 690 iterations done. 6264677074 characters processed.
[bwt_gen] Finished constructing BWT in 695 iterations.
[bwa_index] 2978.50 seconds elapse.
[bwa_index] Update BWT... 12.71 sec
[bwa_index] Pack forward-only FASTA... 11.39 sec
[bwa_index] Construct SA from BWT and Occ... 1208.06 sec
[main] Version: 0.7.17-r1198-dirty
[main] CMD: bwa index /home/lchanem1/data-abattle4/lakshmi/hs37d5.fa
[main] Real time: 4248.388 sec; CPU: 4228.105 sec
Index Reference Genome completed successfully in 4249 seconds.
Processing sample: zihe_1
[M::bwa_idx_load_from_disk] read 0 ALT contigs
[M::process] read 160000 sequences (20000000 bp)...
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 51703, 28, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (203, 326, 1139)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3011)
[M::mem_pestat] mean and std.dev: (530.20, 622.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3947)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (550, 912, 2245)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5635)
[M::mem_pestat] mean and std.dev: (1532.46, 1391.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7330)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.186 CPU sec, 15.121 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 48267, 25, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (207, 311, 750)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1836)
[M::mem_pestat] mean and std.dev: (361.17, 332.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2379)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (387, 1118, 2181)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5769)
[M::mem_pestat] mean and std.dev: (1196.32, 940.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7563)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.863 CPU sec, 17.842 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 44997, 23, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (204, 317, 774)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1914)
[M::mem_pestat] mean and std.dev: (372.32, 345.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2484)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (451, 2171, 4827)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13579)
[M::mem_pestat] mean and std.dev: (2438.30, 2028.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17955)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.017 CPU sec, 17.430 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 47900, 66, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (202, 319, 886)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2254)
[M::mem_pestat] mean and std.dev: (430.49, 437.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2938)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (585, 963, 2591)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6603)
[M::mem_pestat] mean and std.dev: (1369.33, 1253.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8609)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.779 CPU sec, 15.816 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 47146, 35, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (202, 328, 1066)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2794)
[M::mem_pestat] mean and std.dev: (507.24, 581.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3658)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (187, 305, 1337)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3637)
[M::mem_pestat] mean and std.dev: (688.84, 810.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4787)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.374 CPU sec, 19.097 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 44601, 27, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (201, 331, 1012)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2634)
[M::mem_pestat] mean and std.dev: (489.48, 543.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3445)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (639, 739, 2628)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6606)
[M::mem_pestat] mean and std.dev: (1683.59, 1417.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8595)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.354 CPU sec, 17.602 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 24663, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (187, 294, 478)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1060)
[M::mem_pestat] mean and std.dev: (285.40, 173.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1351)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 26.844 CPU sec, 13.334 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 17728, 9, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (194, 283, 395)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 797)
[M::mem_pestat] mean and std.dev: (269.63, 124.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 998)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 17.801 CPU sec, 8.750 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 51785, 28, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (210, 316, 1046)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2718)
[M::mem_pestat] mean and std.dev: (492.97, 559.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3554)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1863, 6352, 7949)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 20121)
[M::mem_pestat] mean and std.dev: (4939.57, 3260.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 26207)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.056 CPU sec, 13.908 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 52837, 46, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (211, 319, 1766)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4876)
[M::mem_pestat] mean and std.dev: (790.69, 1118.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6431)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (586, 940, 1915)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4573)
[M::mem_pestat] mean and std.dev: (1163.55, 723.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5902)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.738 CPU sec, 17.277 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41524, 7, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (199, 290, 630)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1492)
[M::mem_pestat] mean and std.dev: (312.47, 243.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1923)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 29.803 CPU sec, 14.796 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 45365, 24, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (207, 306, 893)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2265)
[M::mem_pestat] mean and std.dev: (403.55, 423.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2951)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2205, 3292, 7020)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 16650)
[M::mem_pestat] mean and std.dev: (4532.79, 3110.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 21465)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.010 CPU sec, 16.901 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 47485, 47, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (207, 316, 910)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2316)
[M::mem_pestat] mean and std.dev: (451.61, 461.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3019)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (833, 3111, 5228)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14018)
[M::mem_pestat] mean and std.dev: (3614.81, 2816.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18413)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.281 CPU sec, 17.040 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 45142, 17, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (210, 322, 1063)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2769)
[M::mem_pestat] mean and std.dev: (506.60, 562.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3622)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (542, 3090, 4065)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11111)
[M::mem_pestat] mean and std.dev: (2478.59, 1800.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14634)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.382 CPU sec, 17.085 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 49186, 30, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (208, 324, 1064)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2776)
[M::mem_pestat] mean and std.dev: (505.63, 570.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3632)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (956, 1648, 4114)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10430)
[M::mem_pestat] mean and std.dev: (2243.07, 1572.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13588)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.882 CPU sec, 18.343 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 50497, 29, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (213, 330, 972)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2490)
[M::mem_pestat] mean and std.dev: (485.19, 511.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3249)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (510, 794, 4832)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13476)
[M::mem_pestat] mean and std.dev: (2270.86, 2812.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17798)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.969 CPU sec, 16.853 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 37683, 13, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (209, 317, 936)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2390)
[M::mem_pestat] mean and std.dev: (439.81, 466.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3117)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (863, 3010, 3756)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9542)
[M::mem_pestat] mean and std.dev: (2589.92, 1531.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12435)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.365 CPU sec, 17.592 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 15059, 11, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (181, 261, 362)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 724)
[M::mem_pestat] mean and std.dev: (255.23, 111.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 905)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (445, 498, 5119)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14467)
[M::mem_pestat] mean and std.dev: (1739.36, 2129.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19141)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 23.871 CPU sec, 11.828 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 17129, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (194, 263, 340)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 632)
[M::mem_pestat] mean and std.dev: (268.59, 103.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 778)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 15.591 CPU sec, 7.651 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 14031, 12, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (216, 333, 1268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3372)
[M::mem_pestat] mean and std.dev: (618.80, 714.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4424)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (533, 1449, 2243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5663)
[M::mem_pestat] mean and std.dev: (1162.45, 964.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7373)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.400 CPU sec, 12.591 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 47515, 41, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (207, 309, 1102)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2892)
[M::mem_pestat] mean and std.dev: (516.25, 602.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3787)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (996, 2336, 7746)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21246)
[M::mem_pestat] mean and std.dev: (3794.07, 3356.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27996)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.348 CPU sec, 14.579 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48807, 27, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (212, 320, 1034)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2678)
[M::mem_pestat] mean and std.dev: (531.96, 576.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3500)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (478, 1576, 2940)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7864)
[M::mem_pestat] mean and std.dev: (1657.08, 1686.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10326)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.352 CPU sec, 13.557 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 46468, 27, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (217, 328, 1016)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2614)
[M::mem_pestat] mean and std.dev: (496.51, 532.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3413)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1509, 2023, 2269)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3789)
[M::mem_pestat] mean and std.dev: (1811.96, 915.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5473)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.055 CPU sec, 14.417 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 20964, 8, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (217, 309, 482)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1012)
[M::mem_pestat] mean and std.dev: (298.77, 156.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1277)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 18.224 CPU sec, 8.987 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 48290, 37, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (267, 404, 1821)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4929)
[M::mem_pestat] mean and std.dev: (894.84, 1124.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6483)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1436, 3008, 5604)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13940)
[M::mem_pestat] mean and std.dev: (3301.54, 2370.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18108)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.906 CPU sec, 17.360 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 43884, 23, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (267, 400, 1413)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3705)
[M::mem_pestat] mean and std.dev: (694.79, 797.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4851)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (809, 2051, 4488)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11846)
[M::mem_pestat] mean and std.dev: (2999.87, 2703.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15525)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.340 CPU sec, 17.562 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 45107, 23, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1701, 3649, 6711)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 16731)
[M::mem_pestat] mean and std.dev: (4561.20, 3028.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 21741)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (273, 426, 1681)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4497)
[M::mem_pestat] mean and std.dev: (849.81, 1009.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5905)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (914, 1384, 2331)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5165)
[M::mem_pestat] mean and std.dev: (1205.16, 805.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6582)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.305 CPU sec, 18.062 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 36349, 19, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (261, 391, 1131)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2871)
[M::mem_pestat] mean and std.dev: (558.61, 570.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3741)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (857, 1093, 2711)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6419)
[M::mem_pestat] mean and std.dev: (1753.58, 1428.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8273)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.679 CPU sec, 16.228 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 21450, 12, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (241, 339, 502)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1024)
[M::mem_pestat] mean and std.dev: (327.70, 157.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1285)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (353, 2476, 6265)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18089)
[M::mem_pestat] mean and std.dev: (2818.00, 2760.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 24001)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 19.072 CPU sec, 9.412 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 53882, 31, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (247, 377, 1217)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3157)
[M::mem_pestat] mean and std.dev: (569.75, 630.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4127)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (904, 1336, 3031)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7285)
[M::mem_pestat] mean and std.dev: (2240.87, 1909.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9877)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.872 CPU sec, 14.313 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 49556, 37, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (243, 361, 830)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2004)
[M::mem_pestat] mean and std.dev: (422.22, 355.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2591)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (585, 1032, 2199)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5427)
[M::mem_pestat] mean and std.dev: (1225.19, 818.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7041)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.964 CPU sec, 15.868 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 53681, 33, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (243, 353, 738)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1728)
[M::mem_pestat] mean and std.dev: (385.28, 286.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2223)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (303, 501, 1870)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5004)
[M::mem_pestat] mean and std.dev: (836.28, 900.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6571)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.290 CPU sec, 15.022 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 48093, 62, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (244, 369, 1028)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2596)
[M::mem_pestat] mean and std.dev: (499.08, 504.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3380)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (540, 1123, 2515)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6465)
[M::mem_pestat] mean and std.dev: (1542.87, 1240.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8440)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 37.093 CPU sec, 18.450 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 50228, 58, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (242, 374, 1024)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2588)
[M::mem_pestat] mean and std.dev: (514.17, 513.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3370)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (558, 928, 2294)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5766)
[M::mem_pestat] mean and std.dev: (1216.76, 1042.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7502)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.281 CPU sec, 19.051 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 24313, 13, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (224, 316, 466)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 950)
[M::mem_pestat] mean and std.dev: (316.67, 152.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1192)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1949, 1986, 2068)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1711, 2306)
[M::mem_pestat] mean and std.dev: (2014.40, 53.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1592, 2425)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 24.466 CPU sec, 12.104 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 36900, 40, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (231, 359, 1167)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3039)
[M::mem_pestat] mean and std.dev: (551.11, 615.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3975)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (428, 1197, 5548)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15788)
[M::mem_pestat] mean and std.dev: (2642.97, 2834.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 20908)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.472 CPU sec, 14.115 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 48642, 21, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (226, 340, 714)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1690)
[M::mem_pestat] mean and std.dev: (369.39, 280.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2178)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1484, 2173, 5098)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12326)
[M::mem_pestat] mean and std.dev: (2827.38, 1756.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15940)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.454 CPU sec, 15.632 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 50053, 18, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (229, 345, 714)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1684)
[M::mem_pestat] mean and std.dev: (385.96, 293.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2169)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (424, 1955, 4281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11995)
[M::mem_pestat] mean and std.dev: (2593.94, 2534.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15852)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.265 CPU sec, 16.010 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 46992, 41, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (230, 357, 929)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2327)
[M::mem_pestat] mean and std.dev: (456.66, 438.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3026)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (964, 1541, 3413)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8311)
[M::mem_pestat] mean and std.dev: (2197.71, 1802.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10760)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (889, 1941, 2195)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4807)
[M::mem_pestat] mean and std.dev: (1815.11, 1209.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6652)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 41.381 CPU sec, 20.616 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 33256, 40, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (223, 344, 801)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1957)
[M::mem_pestat] mean and std.dev: (417.96, 367.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2535)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (336, 1270, 2841)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7851)
[M::mem_pestat] mean and std.dev: (1844.83, 1776.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10356)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.175 CPU sec, 18.010 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 28651, 18, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (252, 373, 934)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2298)
[M::mem_pestat] mean and std.dev: (470.83, 437.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2980)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (291, 618, 3297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9309)
[M::mem_pestat] mean and std.dev: (1540.00, 1610.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12315)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.274 CPU sec, 12.517 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 50780, 24, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (264, 396, 1322)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3438)
[M::mem_pestat] mean and std.dev: (627.21, 713.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4496)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1060, 1915, 5927)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15661)
[M::mem_pestat] mean and std.dev: (3447.38, 3016.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 20528)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.036 CPU sec, 17.916 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 48407, 35, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (261, 379, 826)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1956)
[M::mem_pestat] mean and std.dev: (424.41, 333.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2521)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (731, 1783, 2429)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5825)
[M::mem_pestat] mean and std.dev: (1620.33, 1017.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7523)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.804 CPU sec, 17.303 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 47849, 63, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (265, 405, 1273)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3289)
[M::mem_pestat] mean and std.dev: (627.23, 678.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4297)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (552, 797, 1548)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3540)
[M::mem_pestat] mean and std.dev: (928.16, 677.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4536)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 42.297 CPU sec, 21.053 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 47290, 39, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (265, 406, 1206)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3088)
[M::mem_pestat] mean and std.dev: (600.18, 631.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4029)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (478, 1782, 3683)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10093)
[M::mem_pestat] mean and std.dev: (2597.00, 2391.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13298)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 41.627 CPU sec, 20.713 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 19467, 26, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (246, 340, 486)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 966)
[M::mem_pestat] mean and std.dev: (338.19, 156.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1206)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (317, 607, 1148)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2810)
[M::mem_pestat] mean and std.dev: (837.46, 743.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3812)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.707 CPU sec, 12.732 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 46870, 59, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (239, 350, 825)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1997)
[M::mem_pestat] mean and std.dev: (406.65, 346.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2583)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (598, 1166, 2643)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6733)
[M::mem_pestat] mean and std.dev: (1525.05, 1236.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8778)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.621 CPU sec, 12.693 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 55681, 77, 13)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (240, 348, 790)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1890)
[M::mem_pestat] mean and std.dev: (391.77, 323.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2440)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (995, 1610, 4419)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11267)
[M::mem_pestat] mean and std.dev: (2395.36, 1795.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14691)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (4472, 4508, 9151)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18509)
[M::mem_pestat] mean and std.dev: (4929.38, 2640.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23188)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 27.926 CPU sec, 13.837 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 52570, 64, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (569, 8397, 8565)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 24557)
[M::mem_pestat] mean and std.dev: (5317.08, 3699.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 32553)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (239, 352, 776)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1850)
[M::mem_pestat] mean and std.dev: (392.99, 319.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2387)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (809, 2496, 5593)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15161)
[M::mem_pestat] mean and std.dev: (3030.92, 2326.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19945)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.922 CPU sec, 14.337 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 51687, 66, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (240, 340, 535)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1125)
[M::mem_pestat] mean and std.dev: (325.78, 169.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1420)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (430, 2054, 2265)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5935)
[M::mem_pestat] mean and std.dev: (1839.69, 1390.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7770)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.853 CPU sec, 14.330 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 49024, 90, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (239, 355, 833)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2021)
[M::mem_pestat] mean and std.dev: (443.69, 385.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2615)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (218, 1654, 4775)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13889)
[M::mem_pestat] mean and std.dev: (2346.30, 2241.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18446)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.188 CPU sec, 14.970 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 50904, 59, 12)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (241, 356, 1058)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2692)
[M::mem_pestat] mean and std.dev: (488.90, 526.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3509)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (392, 1881, 5806)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 16634)
[M::mem_pestat] mean and std.dev: (2692.02, 2613.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22048)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1943, 4900, 4963)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11003)
[M::mem_pestat] mean and std.dev: (3435.08, 1615.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14023)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 36.820 CPU sec, 18.300 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 52358, 47, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (241, 361, 828)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2002)
[M::mem_pestat] mean and std.dev: (427.14, 366.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2589)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (576, 1333, 3056)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8016)
[M::mem_pestat] mean and std.dev: (1769.72, 1888.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10496)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.106 CPU sec, 17.454 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 29953, 9, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (542, 1066, 1276)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2744)
[M::mem_pestat] mean and std.dev: (896.20, 353.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3478)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (229, 338, 583)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1291)
[M::mem_pestat] mean and std.dev: (338.90, 212.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1645)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (608, 1352, 4838)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13298)
[M::mem_pestat] mean and std.dev: (2397.20, 2335.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17528)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 29.049 CPU sec, 14.408 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 10268, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (218, 302, 405)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 779)
[M::mem_pestat] mean and std.dev: (302.49, 127.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 966)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 18.622 CPU sec, 9.161 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 52323, 62, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (270, 405, 1175)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2985)
[M::mem_pestat] mean and std.dev: (573.05, 594.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3890)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (764, 1284, 7634)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21374)
[M::mem_pestat] mean and std.dev: (3631.53, 3508.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 28244)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.575 CPU sec, 16.180 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 48771, 58, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (266, 383, 696)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1556)
[M::mem_pestat] mean and std.dev: (387.74, 237.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1986)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1006, 3080, 6232)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 16684)
[M::mem_pestat] mean and std.dev: (3896.03, 2824.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 21910)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.391 CPU sec, 16.581 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 48799, 51, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (266, 397, 980)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2408)
[M::mem_pestat] mean and std.dev: (525.10, 486.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3122)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (515, 1459, 2477)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6401)
[M::mem_pestat] mean and std.dev: (1238.09, 880.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8363)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.471 CPU sec, 18.116 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 51374, 36, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (270, 401, 1014)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2502)
[M::mem_pestat] mean and std.dev: (511.60, 476.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3246)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (608, 2854, 6644)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18716)
[M::mem_pestat] mean and std.dev: (3443.56, 3135.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 24752)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.928 CPU sec, 20.378 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 33971, 28, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (258, 382, 769)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1791)
[M::mem_pestat] mean and std.dev: (415.17, 305.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2302)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (128, 511, 1164)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3236)
[M::mem_pestat] mean and std.dev: (667.96, 773.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4272)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.589 CPU sec, 17.196 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 15168, 6, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (241, 333, 469)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 925)
[M::mem_pestat] mean and std.dev: (334.75, 155.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1153)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 19.344 CPU sec, 9.548 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (16, 52194, 32, 17)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (903, 2873, 4835)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12699)
[M::mem_pestat] mean and std.dev: (2970.38, 2418.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16631)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (255, 384, 1226)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3168)
[M::mem_pestat] mean and std.dev: (569.32, 632.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4139)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (825, 1854, 5931)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 16143)
[M::mem_pestat] mean and std.dev: (2914.44, 2486.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 21249)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (815, 1248, 4594)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12152)
[M::mem_pestat] mean and std.dev: (2149.47, 2013.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15931)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 30.439 CPU sec, 15.118 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 52345, 39, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (254, 374, 913)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2231)
[M::mem_pestat] mean and std.dev: (445.00, 395.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2890)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1031, 2075, 3113)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7277)
[M::mem_pestat] mean and std.dev: (2219.94, 2033.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10353)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.194 CPU sec, 15.996 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 49249, 13, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (253, 369, 741)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1717)
[M::mem_pestat] mean and std.dev: (392.63, 284.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2205)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (686, 733, 1192)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2204)
[M::mem_pestat] mean and std.dev: (816.23, 282.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2710)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.570 CPU sec, 16.179 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 50572, 41, 14)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (254, 377, 873)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2111)
[M::mem_pestat] mean and std.dev: (460.81, 402.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2730)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (331, 1927, 3309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9265)
[M::mem_pestat] mean and std.dev: (2257.37, 2085.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12243)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1783, 2130, 5186)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11992)
[M::mem_pestat] mean and std.dev: (2798.86, 1950.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15395)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.935 CPU sec, 15.863 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 45978, 64, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (256, 382, 998)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2482)
[M::mem_pestat] mean and std.dev: (490.09, 466.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3224)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1076, 2138, 4356)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10916)
[M::mem_pestat] mean and std.dev: (2720.84, 2048.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14196)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.023 CPU sec, 18.908 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 50117, 20, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (254, 381, 975)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2417)
[M::mem_pestat] mean and std.dev: (498.70, 478.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3138)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1048, 3044, 3372)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8020)
[M::mem_pestat] mean and std.dev: (2498.60, 2039.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10656)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (435, 2718, 7104)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 20442)
[M::mem_pestat] mean and std.dev: (3328.90, 3233.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27111)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 38.601 CPU sec, 19.193 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 40491, 47, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (249, 381, 1048)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2646)
[M::mem_pestat] mean and std.dev: (505.23, 503.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3445)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1280, 2443, 2894)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6122)
[M::mem_pestat] mean and std.dev: (1894.35, 959.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7736)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.398 CPU sec, 21.632 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 11496, 7, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (221, 300, 392)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 734)
[M::mem_pestat] mean and std.dev: (311.24, 130.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 905)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 19.499 CPU sec, 9.624 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 43019, 115, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (259, 395, 1315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3427)
[M::mem_pestat] mean and std.dev: (626.84, 699.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4483)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (839, 1506, 3850)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9872)
[M::mem_pestat] mean and std.dev: (2288.53, 1849.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12883)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.037 CPU sec, 15.380 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (18, 52726, 164, 22)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1196, 1937, 4659)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11585)
[M::mem_pestat] mean and std.dev: (2973.33, 2395.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15048)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (257, 376, 893)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2165)
[M::mem_pestat] mean and std.dev: (448.00, 390.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2801)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (833, 1410, 3595)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9119)
[M::mem_pestat] mean and std.dev: (2204.99, 2067.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11881)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (938, 1821, 3330)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8114)
[M::mem_pestat] mean and std.dev: (2106.30, 1833.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10506)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 32.823 CPU sec, 16.305 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (14, 52032, 125, 11)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (535, 1220, 2456)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6298)
[M::mem_pestat] mean and std.dev: (1415.00, 1048.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8219)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (255, 363, 673)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1509)
[M::mem_pestat] mean and std.dev: (368.73, 227.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1927)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (638, 1466, 2406)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5942)
[M::mem_pestat] mean and std.dev: (1541.99, 1212.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7710)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (730, 1321, 2387)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5701)
[M::mem_pestat] mean and std.dev: (1630.64, 1166.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7358)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 32.911 CPU sec, 16.341 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (22, 49610, 142, 17)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1277, 4350, 5091)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12719)
[M::mem_pestat] mean and std.dev: (3941.82, 2464.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16533)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (255, 385, 1049)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2637)
[M::mem_pestat] mean and std.dev: (528.94, 520.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3431)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (558, 1477, 2699)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6981)
[M::mem_pestat] mean and std.dev: (1554.15, 1340.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9122)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1783, 3543, 7224)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18106)
[M::mem_pestat] mean and std.dev: (4399.41, 2632.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23547)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 37.940 CPU sec, 18.862 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 51003, 149, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (256, 386, 1027)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2569)
[M::mem_pestat] mean and std.dev: (518.82, 509.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3340)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (713, 1394, 3892)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10250)
[M::mem_pestat] mean and std.dev: (2219.05, 1957.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13429)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1547, 2493, 9511)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 25439)
[M::mem_pestat] mean and std.dev: (4814.80, 3944.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 33403)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 41.877 CPU sec, 20.843 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 30798, 88, 8)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (987, 1068, 1506)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2544)
[M::mem_pestat] mean and std.dev: (961.30, 498.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3063)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (246, 366, 757)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1779)
[M::mem_pestat] mean and std.dev: (405.95, 309.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2290)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1073, 1487, 4257)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10625)
[M::mem_pestat] mean and std.dev: (2642.83, 2278.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13809)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.262 CPU sec, 17.053 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 21077, 4, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (244, 347, 721)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1675)
[M::mem_pestat] mean and std.dev: (399.61, 303.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2152)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 22.103 CPU sec, 10.921 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48821, 25, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (243, 355, 1542)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4140)
[M::mem_pestat] mean and std.dev: (729.33, 907.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5439)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1408, 1456, 2895)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5869)
[M::mem_pestat] mean and std.dev: (2181.32, 1234.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7356)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.804 CPU sec, 15.311 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 49181, 21, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (247, 354, 1165)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3001)
[M::mem_pestat] mean and std.dev: (594.48, 649.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3919)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1951, 2772, 6127)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14479)
[M::mem_pestat] mean and std.dev: (3407.24, 2370.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18655)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.291 CPU sec, 13.548 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 44020, 18, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (251, 383, 1360)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3578)
[M::mem_pestat] mean and std.dev: (704.80, 785.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4687)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (373, 3155, 5431)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15547)
[M::mem_pestat] mean and std.dev: (3352.50, 3076.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 20605)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.211 CPU sec, 14.991 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 49658, 21, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (253, 378, 1356)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3562)
[M::mem_pestat] mean and std.dev: (659.37, 742.91)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4665)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1035, 1326, 2501)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5433)
[M::mem_pestat] mean and std.dev: (1656.19, 948.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6899)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.630 CPU sec, 15.725 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 39206, 12, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (248, 366, 1353)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3563)
[M::mem_pestat] mean and std.dev: (670.41, 784.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4668)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (391, 2075, 3792)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10594)
[M::mem_pestat] mean and std.dev: (1892.00, 1786.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13995)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.048 CPU sec, 16.424 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 9971, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (225, 294, 361)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 633)
[M::mem_pestat] mean and std.dev: (293.15, 102.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 769)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 14.559 CPU sec, 7.152 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 53928, 38, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (250, 365, 956)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2368)
[M::mem_pestat] mean and std.dev: (476.91, 459.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3074)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (592, 1939, 2275)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5641)
[M::mem_pestat] mean and std.dev: (1528.25, 982.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7324)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.663 CPU sec, 12.712 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 52177, 65, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (247, 353, 801)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1909)
[M::mem_pestat] mean and std.dev: (396.77, 332.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2463)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1238, 2272, 5455)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13889)
[M::mem_pestat] mean and std.dev: (3540.12, 2941.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 18106)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.146 CPU sec, 13.460 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 49209, 28, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (245, 347, 559)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1187)
[M::mem_pestat] mean and std.dev: (332.28, 183.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1501)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (703, 1300, 1918)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4348)
[M::mem_pestat] mean and std.dev: (1124.35, 698.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5563)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.672 CPU sec, 13.237 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 48316, 49, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (250, 356, 690)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1570)
[M::mem_pestat] mean and std.dev: (370.74, 260.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2010)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (848, 2706, 3940)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10124)
[M::mem_pestat] mean and std.dev: (2601.29, 1767.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13216)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.672 CPU sec, 15.227 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 48620, 58, 8)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1746, 6101, 7950)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 20358)
[M::mem_pestat] mean and std.dev: (4701.69, 3273.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 26562)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (253, 373, 985)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2449)
[M::mem_pestat] mean and std.dev: (508.36, 490.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3181)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (670, 1615, 2058)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4834)
[M::mem_pestat] mean and std.dev: (1502.72, 920.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6222)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.027 CPU sec, 14.900 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 51497, 48, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (251, 362, 987)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2459)
[M::mem_pestat] mean and std.dev: (470.13, 466.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3195)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1212, 1563, 2187)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4137)
[M::mem_pestat] mean and std.dev: (1826.23, 980.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5747)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.600 CPU sec, 16.193 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 53296, 82, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (261, 384, 895)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2163)
[M::mem_pestat] mean and std.dev: (479.08, 421.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2797)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1134, 1417, 2047)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3873)
[M::mem_pestat] mean and std.dev: (1573.27, 870.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5055)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1431, 2792, 4911)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11871)
[M::mem_pestat] mean and std.dev: (3180.70, 1864.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15351)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.077 CPU sec, 15.431 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 48723, 83, 14)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (266, 799, 2625)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7343)
[M::mem_pestat] mean and std.dev: (1335.58, 1129.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9702)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (259, 389, 1286)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3340)
[M::mem_pestat] mean and std.dev: (616.33, 703.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4367)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (346, 898, 1972)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5224)
[M::mem_pestat] mean and std.dev: (1269.31, 1034.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6850)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (236, 2386, 2621)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7391)
[M::mem_pestat] mean and std.dev: (1508.43, 1340.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9776)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.669 CPU sec, 15.758 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 23273, 16, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (231, 332, 461)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 921)
[M::mem_pestat] mean and std.dev: (311.45, 147.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1151)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2514, 3309, 3509)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (524, 5499)
[M::mem_pestat] mean and std.dev: (3014.81, 471.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6494)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 24.096 CPU sec, 11.977 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 17087, 9, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (216, 308, 387)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 729)
[M::mem_pestat] mean and std.dev: (302.78, 119.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 900)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 15.071 CPU sec, 7.389 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 21703, 37, 14)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (297, 449, 1728)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4590)
[M::mem_pestat] mean and std.dev: (861.42, 1006.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6021)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (288, 443, 1739)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4641)
[M::mem_pestat] mean and std.dev: (916.59, 701.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6092)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (687, 902, 917)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (227, 1377)
[M::mem_pestat] mean and std.dev: (791.77, 154.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1607)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 27.337 CPU sec, 13.575 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 52507, 65, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (300, 460, 1852)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4956)
[M::mem_pestat] mean and std.dev: (928.10, 1109.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6508)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1208, 1508, 4741)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11807)
[M::mem_pestat] mean and std.dev: (2408.35, 1803.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15340)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.238 CPU sec, 14.015 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 51189, 79, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 423, 1260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3192)
[M::mem_pestat] mean and std.dev: (598.76, 621.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4158)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (3130, 5176, 7122)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15106)
[M::mem_pestat] mean and std.dev: (5102.53, 2872.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19098)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.866 CPU sec, 15.344 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (14, 48545, 78, 10)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (2384, 2598, 7380)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17372)
[M::mem_pestat] mean and std.dev: (4111.14, 2990.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22368)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (292, 427, 1260)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3196)
[M::mem_pestat] mean and std.dev: (626.74, 652.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4164)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1048, 2384, 2847)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6445)
[M::mem_pestat] mean and std.dev: (2204.24, 1590.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8568)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (2445, 2617, 7357)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17181)
[M::mem_pestat] mean and std.dev: (3592.00, 2684.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22093)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 29.677 CPU sec, 14.751 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 50583, 41, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 421, 1278)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3246)
[M::mem_pestat] mean and std.dev: (677.96, 709.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4230)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1474, 1964, 5218)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12706)
[M::mem_pestat] mean and std.dev: (3654.32, 2803.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16450)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.518 CPU sec, 15.171 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 50844, 43, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (305, 470, 1333)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3389)
[M::mem_pestat] mean and std.dev: (697.50, 682.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4417)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (905, 1549, 4836)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12698)
[M::mem_pestat] mean and std.dev: (2497.37, 2275.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16629)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.175 CPU sec, 16.511 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 45522, 65, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (299, 443, 1382)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3548)
[M::mem_pestat] mean and std.dev: (721.62, 757.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4631)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (892, 2033, 2608)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6040)
[M::mem_pestat] mean and std.dev: (1775.95, 1163.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7756)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.648 CPU sec, 15.736 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 49871, 20, 12)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (297, 439, 1583)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4155)
[M::mem_pestat] mean and std.dev: (731.79, 856.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5441)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2297, 2768, 8670)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21416)
[M::mem_pestat] mean and std.dev: (4500.05, 3451.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27789)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1098, 1153, 6597)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17595)
[M::mem_pestat] mean and std.dev: (2790.00, 2719.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23094)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 45.176 CPU sec, 22.526 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 52057, 75, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (303, 454, 1295)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3279)
[M::mem_pestat] mean and std.dev: (672.96, 667.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4271)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (444, 966, 1450)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3462)
[M::mem_pestat] mean and std.dev: (913.21, 588.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4468)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.642 CPU sec, 17.743 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 45530, 91, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (306, 483, 2073)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5607)
[M::mem_pestat] mean and std.dev: (1098.42, 1334.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7374)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1437, 3974, 7986)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21084)
[M::mem_pestat] mean and std.dev: (3909.42, 2736.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27633)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.536 CPU sec, 19.211 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 31713, 33, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (279, 394, 628)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1326)
[M::mem_pestat] mean and std.dev: (397.18, 214.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1675)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (504, 1508, 2252)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5748)
[M::mem_pestat] mean and std.dev: (1895.74, 1669.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8575)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.588 CPU sec, 15.228 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 17674, 12, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (254, 338, 425)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 767)
[M::mem_pestat] mean and std.dev: (343.87, 130.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 938)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (992, 1294, 1310)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (356, 1946)
[M::mem_pestat] mean and std.dev: (1137.82, 302.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2347)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 16.148 CPU sec, 7.931 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 4139, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (288, 373, 490)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 894)
[M::mem_pestat] mean and std.dev: (390.61, 146.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1096)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 18.808 CPU sec, 9.281 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 50975, 10, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (306, 507, 2097)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5679)
[M::mem_pestat] mean and std.dev: (1114.30, 1322.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7470)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (330, 1124, 1559)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4017)
[M::mem_pestat] mean and std.dev: (873.78, 545.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5246)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.865 CPU sec, 14.343 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 48734, 38, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (308, 491, 2458)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6758)
[M::mem_pestat] mean and std.dev: (1268.23, 1629.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8908)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (876, 1285, 1992)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4224)
[M::mem_pestat] mean and std.dev: (1109.67, 537.96)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5340)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.257 CPU sec, 20.033 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 45296, 24, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (297, 446, 1585)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4161)
[M::mem_pestat] mean and std.dev: (768.67, 884.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5449)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (278, 872, 3058)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8618)
[M::mem_pestat] mean and std.dev: (1628.12, 1824.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11398)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 39.834 CPU sec, 19.897 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 52806, 15, 1)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (426, 537, 1238)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2862)
[M::mem_pestat] mean and std.dev: (734.44, 639.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3674)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (298, 443, 1454)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3766)
[M::mem_pestat] mean and std.dev: (774.65, 801.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4922)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2219, 2394, 2496)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1665, 3050)
[M::mem_pestat] mean and std.dev: (2271.23, 327.86)
[M::mem_pestat] low and high boundaries for proper pairs: (960, 3583)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.015 CPU sec, 16.432 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 46671, 33, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (303, 477, 1698)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4488)
[M::mem_pestat] mean and std.dev: (870.48, 991.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5883)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (378, 891, 3671)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10257)
[M::mem_pestat] mean and std.dev: (1931.39, 2063.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13550)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.976 CPU sec, 19.387 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 44470, 25, 7)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (672, 1462, 1872)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4272)
[M::mem_pestat] mean and std.dev: (1287.82, 640.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5472)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (310, 493, 1866)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4978)
[M::mem_pestat] mean and std.dev: (953.04, 1111.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6534)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (687, 902, 2051)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4779)
[M::mem_pestat] mean and std.dev: (852.80, 573.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6143)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 39.567 CPU sec, 19.694 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 47643, 21, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (308, 488, 1808)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4808)
[M::mem_pestat] mean and std.dev: (929.32, 1072.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6308)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2033, 2248, 4466)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9332)
[M::mem_pestat] mean and std.dev: (3485.24, 2551.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13692)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 42.799 CPU sec, 21.341 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 46545, 26, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (308, 500, 1813)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4823)
[M::mem_pestat] mean and std.dev: (949.79, 1088.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6328)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (522, 1085, 1292)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2832)
[M::mem_pestat] mean and std.dev: (918.04, 479.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3602)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.952 CPU sec, 21.958 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 31723, 27, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (289, 439, 1270)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3232)
[M::mem_pestat] mean and std.dev: (644.46, 670.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4213)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (735, 1046, 2150)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4980)
[M::mem_pestat] mean and std.dev: (1195.22, 627.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6395)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 44.323 CPU sec, 22.122 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 15298, 4, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (261, 341, 436)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 786)
[M::mem_pestat] mean and std.dev: (352.54, 136.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 961)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 15.599 CPU sec, 7.666 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 17302, 9, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (292, 480, 1837)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4927)
[M::mem_pestat] mean and std.dev: (967.99, 1090.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6472)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 29.808 CPU sec, 14.809 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 48284, 18, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (293, 447, 1743)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4643)
[M::mem_pestat] mean and std.dev: (860.08, 1032.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6093)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (410, 2391, 2737)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7391)
[M::mem_pestat] mean and std.dev: (1678.31, 1257.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9718)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.856 CPU sec, 15.306 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 49539, 30, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (296, 482, 2338)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6422)
[M::mem_pestat] mean and std.dev: (1232.25, 1526.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8464)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (830, 1019, 3199)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7937)
[M::mem_pestat] mean and std.dev: (1658.83, 1266.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10306)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 37.010 CPU sec, 18.421 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48660, 51, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (295, 439, 1529)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3997)
[M::mem_pestat] mean and std.dev: (753.36, 862.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5231)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (543, 907, 4281)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11757)
[M::mem_pestat] mean and std.dev: (2114.53, 2153.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15495)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (630, 667, 901)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (88, 1443)
[M::mem_pestat] mean and std.dev: (686.40, 252.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1714)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 35.587 CPU sec, 17.741 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 43067, 14, 3)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (291, 578, 1596)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4206)
[M::mem_pestat] mean and std.dev: (722.08, 677.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5511)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (287, 429, 1676)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4454)
[M::mem_pestat] mean and std.dev: (818.41, 988.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5843)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (198, 1198, 1626)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4482)
[M::mem_pestat] mean and std.dev: (989.36, 733.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5910)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.190 CPU sec, 21.546 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 41057, 36, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (278, 414, 1117)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2795)
[M::mem_pestat] mean and std.dev: (555.69, 550.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3634)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1680, 2232, 4950)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11490)
[M::mem_pestat] mean and std.dev: (3182.75, 2335.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14760)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.113 CPU sec, 16.457 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 45141, 33, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 449, 1849)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4959)
[M::mem_pestat] mean and std.dev: (912.76, 1127.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6514)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (609, 1430, 3298)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8676)
[M::mem_pestat] mean and std.dev: (2134.36, 1996.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11365)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 39.617 CPU sec, 19.707 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 42540, 27, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 435, 1569)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4119)
[M::mem_pestat] mean and std.dev: (768.79, 899.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5394)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1619, 2574, 7206)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18380)
[M::mem_pestat] mean and std.dev: (3275.59, 2509.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23967)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.121 CPU sec, 21.503 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 46908, 37, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (286, 443, 1398)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3622)
[M::mem_pestat] mean and std.dev: (742.55, 798.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4734)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (164, 1124, 3771)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10985)
[M::mem_pestat] mean and std.dev: (1752.03, 1581.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14592)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.785 CPU sec, 17.298 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 37643, 45, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (306, 508, 2052)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5544)
[M::mem_pestat] mean and std.dev: (1086.88, 1269.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7290)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1422, 4184, 9303)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 25065)
[M::mem_pestat] mean and std.dev: (4484.27, 3379.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 32946)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 41.020 CPU sec, 20.443 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 45381, 47, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 464, 2352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6468)
[M::mem_pestat] mean and std.dev: (1199.81, 1541.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8526)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1070, 1287, 1803)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3269)
[M::mem_pestat] mean and std.dev: (1414.42, 563.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4002)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (4908, 5782, 5910)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (2904, 7914)
[M::mem_pestat] mean and std.dev: (5734.00, 663.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1902, 8916)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 60.020 CPU sec, 30.010 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48376, 26, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (298, 469, 1590)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4174)
[M::mem_pestat] mean and std.dev: (796.18, 879.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5466)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (376, 1009, 1203)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2857)
[M::mem_pestat] mean and std.dev: (739.68, 472.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3684)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 41.780 CPU sec, 20.841 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 50684, 30, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 453, 1475)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3837)
[M::mem_pestat] mean and std.dev: (757.66, 829.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5018)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (250, 674, 1040)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2620)
[M::mem_pestat] mean and std.dev: (683.59, 521.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3410)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.954 CPU sec, 20.407 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 40556, 29, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (299, 500, 2233)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6101)
[M::mem_pestat] mean and std.dev: (1207.22, 1472.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8035)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (290, 1038, 2015)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5465)
[M::mem_pestat] mean and std.dev: (1286.07, 1126.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7190)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.283 CPU sec, 21.589 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 29571, 15, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (283, 427, 1317)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3385)
[M::mem_pestat] mean and std.dev: (667.30, 721.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4419)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1554, 1750, 2078)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (506, 3126)
[M::mem_pestat] mean and std.dev: (1743.33, 462.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3650)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 55.515 CPU sec, 27.735 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 10120, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (234, 325, 429)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 819)
[M::mem_pestat] mean and std.dev: (335.08, 143.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1014)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 16.298 CPU sec, 8.041 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 26908, 12, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (245, 332, 424)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 782)
[M::mem_pestat] mean and std.dev: (337.13, 134.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 961)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (194, 239, 1172)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3128)
[M::mem_pestat] mean and std.dev: (513.92, 484.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4106)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 15.217 CPU sec, 7.486 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 116, 4, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (270, 338, 452)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 816)
[M::mem_pestat] mean and std.dev: (355.99, 141.72)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 998)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 19.158 CPU sec, 9.493 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 20652, 27, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (310, 503, 2149)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5827)
[M::mem_pestat] mean and std.dev: (1167.90, 1390.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7666)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (610, 644, 6959)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 19657)
[M::mem_pestat] mean and std.dev: (2669.33, 2965.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 26006)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.603 CPU sec, 15.201 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 50391, 56, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (310, 486, 2071)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5593)
[M::mem_pestat] mean and std.dev: (1068.92, 1284.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7354)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (866, 1450, 2031)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4361)
[M::mem_pestat] mean and std.dev: (1187.21, 516.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5526)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.321 CPU sec, 17.084 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 48498, 29, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (303, 445, 1724)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4566)
[M::mem_pestat] mean and std.dev: (839.38, 1008.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5987)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (977, 1353, 3802)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9452)
[M::mem_pestat] mean and std.dev: (2273.03, 1753.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12277)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 39.284 CPU sec, 19.571 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 44513, 22, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (304, 456, 1604)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4204)
[M::mem_pestat] mean and std.dev: (802.46, 906.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5504)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (889, 2600, 3389)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8389)
[M::mem_pestat] mean and std.dev: (2246.14, 1442.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10889)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.374 CPU sec, 19.120 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 52245, 28, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (305, 454, 1447)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3731)
[M::mem_pestat] mean and std.dev: (762.29, 792.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4873)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (649, 1164, 3074)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7924)
[M::mem_pestat] mean and std.dev: (1973.21, 1783.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10349)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.040 CPU sec, 17.433 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 42236, 46, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (308, 465, 1526)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3962)
[M::mem_pestat] mean and std.dev: (800.92, 860.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5180)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (313, 843, 3620)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10234)
[M::mem_pestat] mean and std.dev: (2117.11, 2415.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13541)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.224 CPU sec, 20.065 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 48961, 53, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (313, 484, 1916)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5122)
[M::mem_pestat] mean and std.dev: (969.43, 1145.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6725)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1169, 2643, 7432)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 19958)
[M::mem_pestat] mean and std.dev: (3784.25, 2977.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 26221)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 45.365 CPU sec, 22.628 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 46338, 45, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (313, 491, 1782)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4720)
[M::mem_pestat] mean and std.dev: (933.47, 1063.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6189)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (163, 341, 1097)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2965)
[M::mem_pestat] mean and std.dev: (620.07, 786.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3899)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 42.375 CPU sec, 21.128 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 26881, 14, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (292, 420, 973)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2335)
[M::mem_pestat] mean and std.dev: (515.26, 442.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3016)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (936, 2549, 2660)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6108)
[M::mem_pestat] mean and std.dev: (1892.29, 886.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7832)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.302 CPU sec, 18.055 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 11820, 4, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (266, 349, 440)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 788)
[M::mem_pestat] mean and std.dev: (355.96, 132.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 962)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 16.820 CPU sec, 8.308 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 36034, 32, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (263, 393, 1344)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3506)
[M::mem_pestat] mean and std.dev: (669.31, 755.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4587)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (956, 1445, 5760)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 15368)
[M::mem_pestat] mean and std.dev: (3197.97, 2856.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 20172)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.678 CPU sec, 14.245 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 52850, 43, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (262, 400, 1721)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4639)
[M::mem_pestat] mean and std.dev: (863.89, 1066.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6098)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (945, 1473, 2470)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5520)
[M::mem_pestat] mean and std.dev: (1916.80, 1497.36)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7906)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.229 CPU sec, 15.021 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 52253, 19, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (263, 395, 1578)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4208)
[M::mem_pestat] mean and std.dev: (741.58, 916.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5523)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1875, 3083, 3335)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6255)
[M::mem_pestat] mean and std.dev: (2335.11, 1303.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7715)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.040 CPU sec, 15.424 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 46895, 16, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (255, 369, 1174)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3012)
[M::mem_pestat] mean and std.dev: (537.41, 597.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3931)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (730, 889, 1683)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3589)
[M::mem_pestat] mean and std.dev: (863.15, 404.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4542)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 34.562 CPU sec, 17.248 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 42572, 11, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (257, 370, 739)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1703)
[M::mem_pestat] mean and std.dev: (404.22, 294.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2185)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1405, 3738, 9956)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 27058)
[M::mem_pestat] mean and std.dev: (4565.00, 3737.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 35609)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.888 CPU sec, 15.353 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 54774, 42, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (257, 369, 773)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1805)
[M::mem_pestat] mean and std.dev: (435.78, 354.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2321)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (511, 1770, 1958)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4852)
[M::mem_pestat] mean and std.dev: (1366.95, 711.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6299)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.116 CPU sec, 13.459 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 51588, 29, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (266, 399, 1636)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4376)
[M::mem_pestat] mean and std.dev: (813.17, 927.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5746)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (197, 806, 3562)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10292)
[M::mem_pestat] mean and std.dev: (2158.79, 2407.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13657)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.188 CPU sec, 17.529 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 47084, 38, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (260, 399, 1332)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3476)
[M::mem_pestat] mean and std.dev: (680.30, 765.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4548)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1212, 1783, 4911)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12309)
[M::mem_pestat] mean and std.dev: (2703.26, 2299.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16008)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.550 CPU sec, 16.179 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 43611, 49, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (266, 403, 1505)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3983)
[M::mem_pestat] mean and std.dev: (740.95, 857.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5222)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (2448, 3070, 7794)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18486)
[M::mem_pestat] mean and std.dev: (4303.92, 2747.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23832)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 38.508 CPU sec, 19.211 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 47004, 48, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (263, 401, 1594)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4256)
[M::mem_pestat] mean and std.dev: (741.14, 899.83)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5587)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1255, 1915, 2636)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5398)
[M::mem_pestat] mean and std.dev: (1960.25, 1087.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6779)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 42.047 CPU sec, 20.962 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 49331, 36, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (462, 1691, 1831)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4569)
[M::mem_pestat] mean and std.dev: (1269.17, 826.81)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5938)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (262, 382, 802)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1882)
[M::mem_pestat] mean and std.dev: (458.67, 366.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2422)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (881, 1253, 4290)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11108)
[M::mem_pestat] mean and std.dev: (1944.56, 1544.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14517)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.764 CPU sec, 14.253 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 42420, 36, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (268, 434, 1836)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4972)
[M::mem_pestat] mean and std.dev: (954.76, 1163.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6540)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (823, 1397, 6279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17191)
[M::mem_pestat] mean and std.dev: (2428.78, 2351.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22647)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.580 CPU sec, 16.703 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 42639, 42, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (257, 376, 1035)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2591)
[M::mem_pestat] mean and std.dev: (510.86, 506.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3369)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1322, 1453, 2551)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5009)
[M::mem_pestat] mean and std.dev: (1566.82, 806.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6238)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 43.204 CPU sec, 21.538 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 11389, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (198, 282, 376)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 732)
[M::mem_pestat] mean and std.dev: (292.22, 126.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 910)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 16.258 CPU sec, 8.002 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 14595, 18, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (242, 320, 399)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 713)
[M::mem_pestat] mean and std.dev: (322.47, 120.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 870)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (266, 1248, 1272)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3284)
[M::mem_pestat] mean and std.dev: (784.06, 523.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4290)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 16.502 CPU sec, 8.100 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 48, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (200, 267, 363)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 689)
[M::mem_pestat] mean and std.dev: (272.42, 109.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 852)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 17.548 CPU sec, 8.666 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (12, 45745, 34, 13)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1448, 1832, 2124)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (96, 3476)
[M::mem_pestat] mean and std.dev: (1676.73, 386.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4152)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (304, 469, 1864)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4984)
[M::mem_pestat] mean and std.dev: (954.21, 1115.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6544)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (909, 2360, 3970)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10092)
[M::mem_pestat] mean and std.dev: (2799.91, 2025.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13153)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1480, 1835, 2051)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (338, 3193)
[M::mem_pestat] mean and std.dev: (1705.92, 427.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3764)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.221 CPU sec, 15.494 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 51826, 42, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (301, 450, 1932)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5194)
[M::mem_pestat] mean and std.dev: (949.87, 1161.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6825)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (953, 1190, 1653)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3053)
[M::mem_pestat] mean and std.dev: (957.06, 345.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3753)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.262 CPU sec, 18.056 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 44879, 26, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (284, 411, 1435)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3737)
[M::mem_pestat] mean and std.dev: (697.93, 805.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4888)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1798, 2005, 2717)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4555)
[M::mem_pestat] mean and std.dev: (1866.75, 472.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5474)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.728 CPU sec, 18.310 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 48018, 56, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 433, 1585)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4167)
[M::mem_pestat] mean and std.dev: (772.71, 883.41)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5458)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (725, 1413, 4327)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11531)
[M::mem_pestat] mean and std.dev: (2123.75, 1791.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15133)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 39.590 CPU sec, 19.761 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 55842, 44, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (294, 421, 1288)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3276)
[M::mem_pestat] mean and std.dev: (724.93, 743.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4270)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1385, 2426, 2782)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5576)
[M::mem_pestat] mean and std.dev: (2073.97, 934.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6973)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.219 CPU sec, 16.561 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 46441, 46, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (302, 467, 1715)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4541)
[M::mem_pestat] mean and std.dev: (910.15, 1024.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5954)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (909, 1649, 2830)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6672)
[M::mem_pestat] mean and std.dev: (1855.15, 1059.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8593)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.190 CPU sec, 17.542 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 50275, 19, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (303, 453, 1933)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5193)
[M::mem_pestat] mean and std.dev: (962.29, 1179.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6823)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1178, 1873, 2276)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4472)
[M::mem_pestat] mean and std.dev: (1767.89, 800.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5570)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (559, 719, 1409)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3109)
[M::mem_pestat] mean and std.dev: (811.30, 477.71)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3959)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 47.228 CPU sec, 23.555 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 52594, 23, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (302, 457, 1376)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3524)
[M::mem_pestat] mean and std.dev: (720.25, 739.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4598)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (576, 718, 1221)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2511)
[M::mem_pestat] mean and std.dev: (832.45, 583.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3168)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.735 CPU sec, 20.272 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 39989, 76, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (304, 471, 2003)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5401)
[M::mem_pestat] mean and std.dev: (1051.30, 1274.03)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7100)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (569, 1100, 2114)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5204)
[M::mem_pestat] mean and std.dev: (1213.45, 990.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6749)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 51.548 CPU sec, 25.731 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 10088, 2, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (248, 345, 462)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 890)
[M::mem_pestat] mean and std.dev: (346.02, 144.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1104)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 17.357 CPU sec, 8.538 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 15800, 4, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (262, 342, 431)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 769)
[M::mem_pestat] mean and std.dev: (349.98, 128.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 938)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 17.004 CPU sec, 8.384 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 42830, 35, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (278, 422, 2082)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5690)
[M::mem_pestat] mean and std.dev: (1066.45, 1334.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7494)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1125, 1918, 2341)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4773)
[M::mem_pestat] mean and std.dev: (1487.30, 766.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5989)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 41.514 CPU sec, 20.707 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 47269, 22, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (276, 408, 1547)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4089)
[M::mem_pestat] mean and std.dev: (774.84, 884.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5360)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (445, 1777, 2436)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6418)
[M::mem_pestat] mean and std.dev: (1311.11, 993.25)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8409)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 37.697 CPU sec, 18.795 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 44106, 26, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (285, 441, 1742)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4656)
[M::mem_pestat] mean and std.dev: (877.12, 1018.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6113)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (451, 2088, 3106)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8416)
[M::mem_pestat] mean and std.dev: (1872.00, 1278.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11071)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 40.447 CPU sec, 20.167 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 32429, 15, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (272, 400, 1420)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3716)
[M::mem_pestat] mean and std.dev: (707.51, 810.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4864)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (838, 1317, 2658)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6298)
[M::mem_pestat] mean and std.dev: (1797.47, 1282.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8118)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.032 CPU sec, 17.413 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 36425, 33, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (231, 350, 1114)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2880)
[M::mem_pestat] mean and std.dev: (532.84, 587.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3763)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (604, 4630, 5251)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 14545)
[M::mem_pestat] mean and std.dev: (3374.64, 2332.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 19192)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.704 CPU sec, 13.271 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (11, 52061, 42, 11)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1812, 2036, 2151)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1134, 2829)
[M::mem_pestat] mean and std.dev: (2035.25, 333.00)
[M::mem_pestat] low and high boundaries for proper pairs: (703, 3367)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (228, 345, 1130)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2934)
[M::mem_pestat] mean and std.dev: (534.27, 602.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3836)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (628, 1128, 2418)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5998)
[M::mem_pestat] mean and std.dev: (1436.20, 1088.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7788)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (2068, 2096, 2682)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (840, 3910)
[M::mem_pestat] mean and std.dev: (2187.90, 344.79)
[M::mem_pestat] low and high boundaries for proper pairs: (226, 4524)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 28.971 CPU sec, 14.419 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 47118, 16, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (221, 328, 944)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2390)
[M::mem_pestat] mean and std.dev: (432.99, 454.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3113)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1181, 1302, 8634)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 23540)
[M::mem_pestat] mean and std.dev: (3476.38, 3468.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 30993)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.589 CPU sec, 15.706 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 44950, 26, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (228, 342, 1033)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2643)
[M::mem_pestat] mean and std.dev: (488.40, 526.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3448)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (514, 956, 2098)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5266)
[M::mem_pestat] mean and std.dev: (1347.56, 1127.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6850)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.653 CPU sec, 15.742 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 52834, 3, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (233, 334, 596)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1322)
[M::mem_pestat] mean and std.dev: (333.65, 205.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1685)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 26.417 CPU sec, 13.124 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 45613, 32, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (227, 349, 1117)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2897)
[M::mem_pestat] mean and std.dev: (546.33, 593.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3787)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (534, 1663, 1859)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4509)
[M::mem_pestat] mean and std.dev: (1422.94, 835.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5834)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.713 CPU sec, 14.739 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 48291, 34, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (229, 355, 1384)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3694)
[M::mem_pestat] mean and std.dev: (657.95, 795.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4849)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (288, 461, 3056)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8592)
[M::mem_pestat] mean and std.dev: (1955.47, 2603.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12368)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 36.637 CPU sec, 18.233 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 50723, 39, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (232, 355, 904)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2248)
[M::mem_pestat] mean and std.dev: (462.32, 437.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2920)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (165, 218, 326)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 648)
[M::mem_pestat] mean and std.dev: (188.41, 97.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 809)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.325 CPU sec, 15.589 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 46005, 35, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (235, 369, 1413)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3769)
[M::mem_pestat] mean and std.dev: (687.73, 826.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4947)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (300, 526, 1012)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2436)
[M::mem_pestat] mean and std.dev: (535.32, 379.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3148)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 33.623 CPU sec, 16.741 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (9, 34935, 21, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (215, 333, 801)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1973)
[M::mem_pestat] mean and std.dev: (407.13, 378.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2559)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (694, 2098, 3435)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8917)
[M::mem_pestat] mean and std.dev: (2167.19, 1789.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11658)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 35.279 CPU sec, 17.570 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 17084, 9, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (206, 281, 356)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 656)
[M::mem_pestat] mean and std.dev: (282.88, 110.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 806)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 13.447 CPU sec, 6.589 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 33, 0, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (257, 294, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (35, 590)
[M::mem_pestat] mean and std.dev: (311.18, 107.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 741)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 17.388 CPU sec, 8.584 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 52141, 28, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (151, 251, 491)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1171)
[M::mem_pestat] mean and std.dev: (270.78, 198.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1511)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (624, 1502, 3513)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9291)
[M::mem_pestat] mean and std.dev: (1895.82, 1789.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12180)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.045 CPU sec, 12.415 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 51970, 56, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 250, 529)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1287)
[M::mem_pestat] mean and std.dev: (275.56, 218.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1666)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (464, 1086, 4372)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12188)
[M::mem_pestat] mean and std.dev: (2414.23, 2327.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16096)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 24.992 CPU sec, 12.409 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 53422, 21, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 255, 483)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1141)
[M::mem_pestat] mean and std.dev: (266.58, 186.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1470)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (735, 1185, 4256)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11298)
[M::mem_pestat] mean and std.dev: (2200.86, 1772.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14819)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.455 CPU sec, 14.627 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 47733, 21, 6)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (452, 3422, 3879)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10733)
[M::mem_pestat] mean and std.dev: (3014.70, 2011.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14160)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (149, 243, 457)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1073)
[M::mem_pestat] mean and std.dev: (255.20, 170.11)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1381)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (912, 1434, 2905)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6891)
[M::mem_pestat] mean and std.dev: (1971.85, 1206.77)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8884)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.255 CPU sec, 14.532 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (4, 48987, 33, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (152, 249, 460)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1076)
[M::mem_pestat] mean and std.dev: (264.12, 179.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1384)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (966, 1557, 1965)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3963)
[M::mem_pestat] mean and std.dev: (1439.16, 496.74)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4962)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.801 CPU sec, 15.308 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 53535, 10, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 252, 477)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1125)
[M::mem_pestat] mean and std.dev: (264.59, 178.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1449)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (212, 449, 2475)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7001)
[M::mem_pestat] mean and std.dev: (1286.40, 1482.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9264)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.709 CPU sec, 13.265 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 50391, 41, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 243, 474)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1128)
[M::mem_pestat] mean and std.dev: (277.40, 211.46)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1455)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (140, 560, 2466)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7118)
[M::mem_pestat] mean and std.dev: (995.37, 1032.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9444)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.201 CPU sec, 12.493 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 48169, 23, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (149, 259, 595)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1487)
[M::mem_pestat] mean and std.dev: (303.42, 271.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1933)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1102, 1546, 3282)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7642)
[M::mem_pestat] mean and std.dev: (2094.74, 1697.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9822)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.038 CPU sec, 14.921 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 52027, 18, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 250, 524)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1278)
[M::mem_pestat] mean and std.dev: (280.63, 222.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1655)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (510, 1209, 2041)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5103)
[M::mem_pestat] mean and std.dev: (1178.50, 745.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6634)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.582 CPU sec, 16.192 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (5, 54931, 39, 14)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (148, 250, 507)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1225)
[M::mem_pestat] mean and std.dev: (276.10, 209.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1584)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (618, 932, 3195)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8349)
[M::mem_pestat] mean and std.dev: (1855.36, 1891.44)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10926)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (594, 1098, 1157)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2283)
[M::mem_pestat] mean and std.dev: (955.79, 306.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2846)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.546 CPU sec, 15.687 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 43087, 22, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (145, 255, 613)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1549)
[M::mem_pestat] mean and std.dev: (302.72, 277.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2017)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (891, 2221, 3599)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9015)
[M::mem_pestat] mean and std.dev: (2838.23, 2776.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 13943)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.519 CPU sec, 15.172 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 23590, 7, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (146, 219, 353)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 767)
[M::mem_pestat] mean and std.dev: (240.83, 135.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 974)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 25.378 CPU sec, 12.683 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 16690, 0, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (152, 214, 312)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 632)
[M::mem_pestat] mean and std.dev: (239.71, 117.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 792)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 15.605 CPU sec, 7.645 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 31828, 21, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 258, 595)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1479)
[M::mem_pestat] mean and std.dev: (303.80, 266.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1921)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (234, 1392, 2484)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6984)
[M::mem_pestat] mean and std.dev: (1305.52, 1114.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9234)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 23.673 CPU sec, 11.714 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 55443, 30, 11)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 263, 556)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1354)
[M::mem_pestat] mean and std.dev: (289.31, 233.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1753)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1791, 2340, 4085)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8673)
[M::mem_pestat] mean and std.dev: (2683.20, 1514.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 10967)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (854, 1648, 6306)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17210)
[M::mem_pestat] mean and std.dev: (3070.55, 3015.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22662)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 25.160 CPU sec, 12.472 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 54801, 24, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 259, 515)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1227)
[M::mem_pestat] mean and std.dev: (270.50, 194.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1583)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (587, 1876, 3537)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9437)
[M::mem_pestat] mean and std.dev: (2151.92, 1572.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12387)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.215 CPU sec, 13.019 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 49347, 34, 6)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 255, 473)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1107)
[M::mem_pestat] mean and std.dev: (267.05, 180.67)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1424)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (773, 1701, 4632)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12350)
[M::mem_pestat] mean and std.dev: (2873.62, 2506.10)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16209)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.669 CPU sec, 13.202 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 52621, 34, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 258, 484)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1136)
[M::mem_pestat] mean and std.dev: (278.25, 194.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1462)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (197, 759, 1865)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5201)
[M::mem_pestat] mean and std.dev: (1522.24, 1709.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8360)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.948 CPU sec, 12.867 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 46809, 28, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (153, 262, 615)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1539)
[M::mem_pestat] mean and std.dev: (317.81, 289.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2001)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1002, 1999, 2228)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4680)
[M::mem_pestat] mean and std.dev: (1917.39, 1123.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6409)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.795 CPU sec, 13.307 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 52795, 29, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 261, 579)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1429)
[M::mem_pestat] mean and std.dev: (293.99, 248.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1854)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (473, 1183, 2213)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5693)
[M::mem_pestat] mean and std.dev: (1356.36, 1142.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7433)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.082 CPU sec, 13.943 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 56424, 26, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (152, 265, 589)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1463)
[M::mem_pestat] mean and std.dev: (305.77, 265.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1900)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (368, 2080, 3879)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 10901)
[M::mem_pestat] mean and std.dev: (2131.19, 1878.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 14412)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.301 CPU sec, 13.532 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 36831, 29, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (152, 240, 433)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 995)
[M::mem_pestat] mean and std.dev: (255.26, 163.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1276)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (975, 1462, 4760)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 12330)
[M::mem_pestat] mean and std.dev: (2651.72, 2079.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 16115)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.667 CPU sec, 13.716 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 18047, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (155, 217, 315)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 635)
[M::mem_pestat] mean and std.dev: (242.90, 116.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 795)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 13.017 CPU sec, 6.361 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 28150, 6, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (176, 278, 574)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1370)
[M::mem_pestat] mean and std.dev: (302.42, 231.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1768)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 24.327 CPU sec, 12.063 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (13, 54956, 28, 9)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1409, 6864, 9155)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 24647)
[M::mem_pestat] mean and std.dev: (5356.23, 3752.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 32393)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 286, 727)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1821)
[M::mem_pestat] mean and std.dev: (354.00, 336.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2368)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (572, 1171, 2631)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 6749)
[M::mem_pestat] mean and std.dev: (1775.64, 1593.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 8808)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.055 CPU sec, 12.930 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 51943, 24, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (179, 274, 518)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1196)
[M::mem_pestat] mean and std.dev: (280.12, 186.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1535)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1092, 3060, 4574)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11538)
[M::mem_pestat] mean and std.dev: (3472.71, 2904.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15091)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.374 CPU sec, 13.589 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 48349, 41, 4)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (178, 270, 455)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1009)
[M::mem_pestat] mean and std.dev: (271.84, 159.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1286)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (775, 1326, 3766)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9748)
[M::mem_pestat] mean and std.dev: (2136.63, 2105.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12739)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 29.352 CPU sec, 14.609 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 51717, 20, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (178, 277, 531)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1237)
[M::mem_pestat] mean and std.dev: (300.60, 214.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1590)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (426, 586, 3297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9039)
[M::mem_pestat] mean and std.dev: (1982.80, 2426.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11910)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.324 CPU sec, 13.555 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48344, 52, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (177, 274, 523)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1215)
[M::mem_pestat] mean and std.dev: (292.15, 208.62)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1561)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1023, 1526, 1810)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3384)
[M::mem_pestat] mean and std.dev: (1179.04, 604.05)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4171)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.614 CPU sec, 13.705 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (8, 51836, 43, 10)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (177, 281, 574)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1368)
[M::mem_pestat] mean and std.dev: (299.64, 224.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1765)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (639, 2145, 2835)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 7227)
[M::mem_pestat] mean and std.dev: (2038.60, 1362.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 9423)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (358, 1556, 1676)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4312)
[M::mem_pestat] mean and std.dev: (1067.10, 759.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5630)
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 30.918 CPU sec, 15.381 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (16, 54881, 40, 12)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (1037, 2616, 7930)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21716)
[M::mem_pestat] mean and std.dev: (4109.88, 3337.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 28609)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (177, 287, 580)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1386)
[M::mem_pestat] mean and std.dev: (314.81, 245.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1789)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (364, 604, 1109)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2599)
[M::mem_pestat] mean and std.dev: (527.71, 309.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3344)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1237, 1902, 7861)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 21109)
[M::mem_pestat] mean and std.dev: (3153.75, 3013.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27733)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 31.211 CPU sec, 15.538 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 37565, 39, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (173, 262, 443)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 983)
[M::mem_pestat] mean and std.dev: (265.21, 153.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1253)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (650, 2810, 6401)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17903)
[M::mem_pestat] mean and std.dev: (3765.64, 3031.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23654)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 31.490 CPU sec, 15.648 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 13639, 1, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (172, 236, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 628)
[M::mem_pestat] mean and std.dev: (254.55, 110.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 780)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 15.603 CPU sec, 7.675 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 38692, 15, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 220, 424)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 998)
[M::mem_pestat] mean and std.dev: (233.72, 165.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1285)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (602, 1141, 6068)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17000)
[M::mem_pestat] mean and std.dev: (2646.07, 2470.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 22466)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 23.430 CPU sec, 11.604 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 55347, 27, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (139, 223, 500)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1222)
[M::mem_pestat] mean and std.dev: (243.13, 196.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1583)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1355, 1794, 5304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 13202)
[M::mem_pestat] mean and std.dev: (2654.19, 2219.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 17151)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 24.686 CPU sec, 12.230 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 53230, 16, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (141, 222, 411)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 951)
[M::mem_pestat] mean and std.dev: (227.86, 147.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1221)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (308, 602, 3246)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9122)
[M::mem_pestat] mean and std.dev: (1649.88, 1781.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12060)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.380 CPU sec, 13.081 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 46875, 11, 8)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (140, 216, 370)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 830)
[M::mem_pestat] mean and std.dev: (220.76, 128.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1060)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (284, 318, 812)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1868)
[M::mem_pestat] mean and std.dev: (498.20, 430.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2396)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 25.552 CPU sec, 12.689 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 50395, 23, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (140, 218, 390)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 890)
[M::mem_pestat] mean and std.dev: (225.47, 141.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1140)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (622, 1049, 1908)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4480)
[M::mem_pestat] mean and std.dev: (1202.14, 819.65)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 5766)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.457 CPU sec, 13.141 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 52438, 17, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (143, 220, 371)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 827)
[M::mem_pestat] mean and std.dev: (224.35, 128.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1055)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (219, 717, 3103)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 8871)
[M::mem_pestat] mean and std.dev: (1144.71, 1175.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 11755)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.404 CPU sec, 13.085 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 50738, 20, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 218, 430)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1020)
[M::mem_pestat] mean and std.dev: (239.59, 178.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1315)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1834, 6392, 7248)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18076)
[M::mem_pestat] mean and std.dev: (4778.00, 3437.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23490)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 24.528 CPU sec, 12.167 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 48687, 15, 3)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (136, 224, 493)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1207)
[M::mem_pestat] mean and std.dev: (251.76, 208.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1564)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (164, 506, 1642)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 4598)
[M::mem_pestat] mean and std.dev: (872.15, 999.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 6076)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.927 CPU sec, 13.870 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 51049, 27, 9)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (136, 223, 456)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1096)
[M::mem_pestat] mean and std.dev: (248.14, 191.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1416)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1108, 1521, 1974)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3706)
[M::mem_pestat] mean and std.dev: (1375.62, 706.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4572)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.772 CPU sec, 13.795 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 53407, 20, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (136, 223, 446)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1066)
[M::mem_pestat] mean and std.dev: (245.20, 182.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1376)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (516, 1595, 6324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 17940)
[M::mem_pestat] mean and std.dev: (2557.95, 2555.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 23748)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.113 CPU sec, 13.434 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 41480, 11, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 219, 426)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1008)
[M::mem_pestat] mean and std.dev: (235.55, 169.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1299)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1081, 1261, 2673)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 5857)
[M::mem_pestat] mean and std.dev: (1703.36, 1263.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 7449)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 30.159 CPU sec, 15.005 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 18583, 4, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 183, 256)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 498)
[M::mem_pestat] mean and std.dev: (202.18, 90.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 619)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 14.237 CPU sec, 6.957 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (1, 13362, 1, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (168, 246, 392)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 840)
[M::mem_pestat] mean and std.dev: (251.84, 136.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1064)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 21.569 CPU sec, 10.690 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 53869, 23, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 301, 966)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2528)
[M::mem_pestat] mean and std.dev: (442.34, 499.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3309)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1349, 3978, 4063)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 9491)
[M::mem_pestat] mean and std.dev: (2935.22, 1651.14)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 12205)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 26.336 CPU sec, 13.055 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (7, 53157, 14, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 284, 515)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1173)
[M::mem_pestat] mean and std.dev: (289.21, 186.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1502)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1278, 3068, 7565)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 20139)
[M::mem_pestat] mean and std.dev: (3668.50, 3124.45)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 26426)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.284 CPU sec, 14.044 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (6, 50035, 19, 7)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 286, 525)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1205)
[M::mem_pestat] mean and std.dev: (291.58, 190.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1545)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1019, 2463, 7528)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 20546)
[M::mem_pestat] mean and std.dev: (3722.84, 3119.24)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 27055)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 27.885 CPU sec, 13.836 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (10, 52378, 23, 12)
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (615, 1078, 1369)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2877)
[M::mem_pestat] mean and std.dev: (816.00, 342.47)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3631)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 287, 576)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1362)
[M::mem_pestat] mean and std.dev: (312.57, 234.61)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1755)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (730, 846, 1287)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2401)
[M::mem_pestat] mean and std.dev: (743.44, 325.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2958)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (1047, 1271, 6982)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 18852)
[M::mem_pestat] mean and std.dev: (2938.92, 2887.69)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 24787)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_process_seqs] Processed 160000 reads in 26.293 CPU sec, 13.106 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 49584, 26, 2)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (185, 298, 752)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1886)
[M::mem_pestat] mean and std.dev: (374.17, 354.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2453)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (665, 850, 1516)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 3218)
[M::mem_pestat] mean and std.dev: (871.23, 538.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 4069)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.687 CPU sec, 14.202 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (2, 51782, 30, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (183, 297, 658)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1608)
[M::mem_pestat] mean and std.dev: (342.80, 285.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 2083)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (987, 1507, 4355)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 11091)
[M::mem_pestat] mean and std.dev: (3260.20, 3022.86)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 15352)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 28.615 CPU sec, 14.217 real sec
[M::process] read 160000 sequences (20000000 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (3, 49422, 24, 5)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 308, 1020)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 2700)
[M::mem_pestat] mean and std.dev: (484.41, 558.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 3540)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (1411, 1578, 1716)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (801, 2326)
[M::mem_pestat] mean and std.dev: (1527.17, 194.12)
[M::mem_pestat] low and high boundaries for proper pairs: (496, 2631)
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_pestat] skip orientation RF
[M::mem_process_seqs] Processed 160000 reads in 32.481 CPU sec, 16.165 real sec
[M::process] read 96972 sequences (12121500 bp)...
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 19431, 6, 1)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (173, 244, 364)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 746)
[M::mem_pestat] mean and std.dev: (256.77, 122.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 937)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 160000 reads in 18.651 CPU sec, 9.248 real sec
[M::mem_pestat] # candidate unique pairs for (FF, FR, RF, RR): (0, 7806, 2, 0)
[M::mem_pestat] skip orientation FF as there are not enough pairs
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (186, 254, 346)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 666)
[M::mem_pestat] mean and std.dev: (272.65, 118.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 826)
[M::mem_pestat] skip orientation RF as there are not enough pairs
[M::mem_pestat] skip orientation RR as there are not enough pairs
[M::mem_process_seqs] Processed 96972 reads in 10.529 CPU sec, 5.251 real sec
[main] Version: 0.7.17-r1198-dirty
[main] CMD: bwa mem -M -t 2 /home/lchanem1/data-abattle4/lakshmi/hs37d5.fa /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/pipeline_files/concat_files/zihe_1_R1.fastq.gz /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/pipeline_files/concat_files/zihe_1_R2.fastq.gz
[main] Real time: 3698.110 sec; CPU: 7435.327 sec
INFO	2024-04-12 20:09:14	SortSam	

********** NOTE: Picard's command line syntax is changing.
**********
********** For more information, please see:
********** https://github.com/broadinstitute/picard/wiki/Command-Line-Syntax-Transition-For-Users-(Pre-Transition)
**********
********** The command line looks like this in the new syntax:
**********
**********    SortSam -I Starting Align Genome: Aligns raw sequencing data to the human genome using BWA. Align Genome completed successfully in 3698 seconds. /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1.bam -O /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1.sort.bam -SORT_ORDER coordinate -CREATE_INDEX True
**********


ERROR: Invalid argument 'Align'.

USAGE: SortSam [options]

Documentation: http://broadinstitute.github.io/picard/command-line-overview.html#SortSam

This tool sorts the input SAM or BAM file by coordinate, queryname (QNAME), or some other property of the SAM record.
The SortOrder of a SAM/BAM file is found in the SAM file header tag @HD in the field labeled SO.  
For a coordinate sorted SAM/BAM file, read alignments are sorted first by the reference sequence name (RNAME) field
using the reference sequence dictionary (@SQ tag).  Alignments within these subgroups are secondarily sorted using the
left-most mapping position of the read (POS).  Subsequent to this sorting scheme, alignments are listed arbitrarily.

For queryname-sorted alignments, the tool orders records deterministically by queryname field followed by record strand
orientation flag, primary record flag, and secondary alignment flag. This ordering may change in future versions. 



Usage example:

java -jar picard.jar SortSam \
I=input.bam \
O=sorted.bam \
SORT_ORDER=coordinate

Version: 2.20.8-SNAPSHOT


Options:

--help
-h                            Displays options specific to this tool.

--stdhelp
-H                            Displays options specific to this tool AND options common to all Picard command line
                              tools.

--version                     Displays program version.

INPUT=File
I=File                        Input BAM or SAM file to sort.  Required. 

OUTPUT=File
O=File                        Sorted BAM or SAM output file.  Required. 

SORT_ORDER=SortOrder
SO=SortOrder                  Sort order of output file.   Required. Possible values: {
                              queryname (Sorts according to the readname. This will place read-pairs and other derived
                              reads (secondary and supplementary) adjacent to each other. Note that the readnames are
                              compared lexicographically, even though they may include numbers. In paired reads, Read1
                              sorts before Read2.)
                              coordinate (Sorts primarily according to the SEQ and POS fields of the record. The
                              sequence will sorted according to the order in the sequence dictionary, taken from from
                              the header of the file. Within each reference sequence, the reads are sorted by the
                              position. Unmapped reads whose mates are mapped will be placed near their mates. Unmapped
                              read-pairs are placed after all the mapped reads and their mates.)
                              duplicate (Sorts the reads so that duplicates reads are adjacent. Required that the
                              mate-cigar (MC) tag is present. The resulting will be sorted by library, unclipped 5-prime
                              position, orientation, and mate's unclipped 5-prime position.)
                              } 

INFO	2024-04-12 20:09:16	MarkDuplicates	

********** NOTE: Picard's command line syntax is changing.
**********
********** For more information, please see:
********** https://github.com/broadinstitute/picard/wiki/Command-Line-Syntax-Transition-For-Users-(Pre-Transition)
**********
********** The command line looks like this in the new syntax:
**********
**********    MarkDuplicates -I Starting Sort BAM: Sorts the BAM file using Picard. Error in Sort BAM. Exiting. -O /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1.sort.dup.bam -M /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1_dup_metrics.txt
**********


ERROR: Invalid argument 'Sort'.

USAGE: MarkDuplicates [options]

Documentation: http://broadinstitute.github.io/picard/command-line-overview.html#MarkDuplicates

Identifies duplicate reads.  
This tool locates and tags duplicate reads in a BAM or SAM file, where duplicate reads are defined as originating from a
single fragment of DNA.  Duplicates can arise during sample preparation e.g. library construction using PCR.  See also
EstimateLibraryComplexity (https://broadinstitute.github.io/picard/command-line-overview.html#EstimateLibraryComplexity)
for additional notes on PCR duplication artifacts.  Duplicate reads can also result from a single amplification cluster,
incorrectly detected as multiple clusters by the optical sensor of the sequencing instrument.  These duplication
artifacts are referred to as optical duplicates.

The MarkDuplicates tool works by comparing sequences in the 5 prime positions of both reads and read-pairs in a SAM/BAM
file.  An BARCODE_TAG option is available to facilitate duplicate marking using molecular barcodes.  After duplicate
reads are collected, the tool differentiates the primary and duplicate reads using an algorithm that ranks reads by the
sums of their base-quality scores (default method).

The tool's main output is a new SAM or BAM file, in which duplicates have been identified in the SAM flags field for
each read.  Duplicates are marked with the hexadecimal value of 0x0400, which corresponds to a decimal value of 1024. 
If you are not familiar with this type of annotation, please see the following blog post
(https://www.broadinstitute.org/gatk/blog?id=7019) for additional information.

Although the bitwise flag annotation indicates whether a read was marked as a duplicate, it does not identify the type
of duplicate.  To do this, a new tag called the duplicate type (DT) tag was recently added as an optional output in  the
'optional field' section of a SAM/BAM file.  Invoking the TAGGING_POLICY option, you can instruct the program to mark
all the duplicates (All), only the optical duplicates (OpticalOnly), or no duplicates (DontTag).  The records within the
output of a SAM/BAM file will have values for the 'DT' tag (depending on the invoked TAGGING_POLICY), as either
library/PCR-generated duplicates (LB), or sequencing-platform artifact duplicates (SQ).  This tool uses the
READ_NAME_REGEX and the OPTICAL_DUPLICATE_PIXEL_DISTANCE options as the primary methods to identify and differentiate
duplicate types.  Set READ_NAME_REGEX to null to skip optical duplicate detection, e.g. for RNA-seq or other data where
duplicate sets are extremely large and estimating library complexity is not an aim.  Note that without optical duplicate
counts, library size estimation will be inaccurate.

MarkDuplicates also produces a metrics file indicating the numbers of duplicates for both single- and paired-end reads.

The program can take either coordinate-sorted or query-sorted inputs, however the behavior is slightly different.  When
the input is coordinate-sorted, unmapped mates of mapped records and supplementary/secondary alignments are not marked
as duplicates.  However, when the input is query-sorted (actually query-grouped), then unmapped mates and
secondary/supplementary reads are not excluded from the duplication test and can be marked as duplicate reads.

If desired, duplicates can be removed using the REMOVE_DUPLICATE and REMOVE_SEQUENCING_DUPLICATES options.

Usage example:

java -jar picard.jar MarkDuplicates \
I=input.bam \
O=marked_duplicates.bam \
M=marked_dup_metrics.txt
Please see MarkDuplicates (http://broadinstitute.github.io/picard/picard-metric-definitions.html#DuplicationMetrics) for
detailed explanations of the output metrics.

Version: 2.20.8-SNAPSHOT


Options:

--help
-h                            Displays options specific to this tool.

--stdhelp
-H                            Displays options specific to this tool AND options common to all Picard command line
                              tools.

--version                     Displays program version.

MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP=Integer
MAX_SEQS=Integer              This option is obsolete. ReadEnds will always be spilled to disk.  Default value: 50000.
                              This option can be set to 'null' to clear the default value. 

MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=Integer
MAX_FILE_HANDLES=Integer      Maximum number of file handles to keep open when spilling read ends to disk. Set this
                              number a little lower than the per-process maximum number of file that may be open. This
                              number can be found by executing the 'ulimit -n' command on a Unix system.  Default value:
                              8000. This option can be set to 'null' to clear the default value. 

SORTING_COLLECTION_SIZE_RATIO=Double
                              This number, plus the maximum RAM available to the JVM, determine the memory footprint
                              used by some of the sorting collections.  If you are running out of memory, try reducing
                              this number.  Default value: 0.25. This option can be set to 'null' to clear the default
                              value. 

BARCODE_TAG=String            Barcode SAM tag (ex. BC for 10X Genomics)  Default value: null. 

READ_ONE_BARCODE_TAG=String   Read one barcode SAM tag (ex. BX for 10X Genomics)  Default value: null. 

READ_TWO_BARCODE_TAG=String   Read two barcode SAM tag (ex. BX for 10X Genomics)  Default value: null. 

TAG_DUPLICATE_SET_MEMBERS=Boolean
                              If a read appears in a duplicate set, add two tags. The first tag, DUPLICATE_SET_SIZE_TAG
                              (DS), indicates the size of the duplicate set. The smallest possible DS value is 2 which
                              occurs when two reads map to the same portion of the reference only one of which is marked
                              as duplicate. The second tag, DUPLICATE_SET_INDEX_TAG (DI), represents a unique identifier
                              for the duplicate set to which the record belongs. This identifier is the index-in-file of
                              the representative read that was selected out of the duplicate set.  Default value: false.
                              This option can be set to 'null' to clear the default value. Possible values: {true,
                              false} 

REMOVE_SEQUENCING_DUPLICATES=Boolean
                              If true remove 'optical' duplicates and other duplicates that appear to have arisen from
                              the sequencing process instead of the library preparation process, even if
                              REMOVE_DUPLICATES is false. If REMOVE_DUPLICATES is true, all duplicates are removed and
                              this option is ignored.  Default value: false. This option can be set to 'null' to clear
                              the default value. Possible values: {true, false} 

TAGGING_POLICY=DuplicateTaggingPolicy
                              Determines how duplicate types are recorded in the DT optional attribute.  Default value:
                              DontTag. This option can be set to 'null' to clear the default value. Possible values:
                              {DontTag, OpticalOnly, All} 

CLEAR_DT=Boolean              Clear DT tag from input SAM records. Should be set to false if input SAM doesn't have this
                              tag.  Default true  Default value: true. This option can be set to 'null' to clear the
                              default value. Possible values: {true, false} 

DUPLEX_UMI=Boolean            Treat UMIs as being duplex stranded.  This option requires that the UMI consist of two
                              equal length strings that are separated by a hyphen (e.g. 'ATC-GTC'). Reads are considered
                              duplicates if, in addition to standard definition, have identical normalized UMIs.  A UMI
                              from the 'bottom' strand is normalized by swapping its content around the hyphen (eg.
                              ATC-GTC becomes GTC-ATC).  A UMI from the 'top' strand is already normalized as it is.
                              Both reads from a read pair considered top strand if the read 1 unclipped 5' coordinate is
                              less than the read 2 unclipped 5' coordinate. All chimeric reads and read fragments are
                              treated as having come from the top strand. With this option is it required that the
                              BARCODE_TAG hold non-normalized UMIs. Default false.  Default value: false. This option
                              can be set to 'null' to clear the default value. Possible values: {true, false} 

MOLECULAR_IDENTIFIER_TAG=String
                              SAM tag to uniquely identify the molecule from which a read was derived.  Use of this
                              option requires that the BARCODE_TAG option be set to a non null value.  Default null. 
                              Default value: null. 

INPUT=String
I=String                      One or more input SAM or BAM files to analyze. Must be coordinate sorted.  Default value:
                              null. This option may be specified 0 or more times. 

OUTPUT=File
O=File                        The output file to write marked records to  Required. 

METRICS_FILE=File
M=File                        File to write duplication metrics to  Required. 

REMOVE_DUPLICATES=Boolean     If true do not write duplicates to the output file instead of writing them with
                              appropriate flags set.  Default value: false. This option can be set to 'null' to clear
                              the default value. Possible values: {true, false} 

ASSUME_SORTED=Boolean
AS=Boolean                    If true, assume that the input file is coordinate sorted even if the header says
                              otherwise. Deprecated, used ASSUME_SORT_ORDER=coordinate instead.  Default value: false.
                              This option can be set to 'null' to clear the default value. Possible values: {true,
                              false}  Cannot be used in conjuction with option(s) ASSUME_SORT_ORDER (ASO)

ASSUME_SORT_ORDER=SortOrder
ASO=SortOrder                 If not null, assume that the input file has this order even if the header says otherwise. 
                              Default value: null. Possible values: {unsorted, queryname, coordinate, duplicate,
                              unknown}  Cannot be used in conjuction with option(s) ASSUME_SORTED (AS)

DUPLICATE_SCORING_STRATEGY=ScoringStrategy
DS=ScoringStrategy            The scoring strategy for choosing the non-duplicate among candidates.  Default value:
                              SUM_OF_BASE_QUALITIES. This option can be set to 'null' to clear the default value.
                              Possible values: {SUM_OF_BASE_QUALITIES, TOTAL_MAPPED_REFERENCE_LENGTH, RANDOM} 

PROGRAM_RECORD_ID=String
PG=String                     The program record ID for the @PG record(s) created by this program. Set to null to
                              disable PG record creation.  This string may have a suffix appended to avoid collision
                              with other program record IDs.  Default value: MarkDuplicates. This option can be set to
                              'null' to clear the default value. 

PROGRAM_GROUP_VERSION=String
PG_VERSION=String             Value of VN tag of PG record to be created. If not specified, the version will be detected
                              automatically.  Default value: null. 

PROGRAM_GROUP_COMMAND_LINE=String
PG_COMMAND=String             Value of CL tag of PG record to be created. If not supplied the command line will be
                              detected automatically.  Default value: null. 

PROGRAM_GROUP_NAME=String
PG_NAME=String                Value of PN tag of PG record to be created.  Default value: MarkDuplicates. This option
                              can be set to 'null' to clear the default value. 

COMMENT=String
CO=String                     Comment(s) to include in the output file's header.  Default value: null. This option may
                              be specified 0 or more times. 

READ_NAME_REGEX=String        MarkDuplicates can use the tile and cluster positions to estimate the rate of optical
                              duplication in addition to the dominant source of duplication, PCR, to provide a more
                              accurate estimation of library size. By default (with no READ_NAME_REGEX specified),
                              MarkDuplicates will attempt to extract coordinates using a split on ':' (see Note below). 
                              Set READ_NAME_REGEX to 'null' to disable optical duplicate detection. Note that without
                              optical duplicate counts, library size estimation will be less accurate. If the read name
                              does not follow a standard Illumina colon-separation convention, but does contain tile and
                              x,y coordinates, a regular expression can be specified to extract three variables:
                              tile/region, x coordinate and y coordinate from a read name. The regular expression must
                              contain three capture groups for the three variables, in order. It must match the entire
                              read name.   e.g. if field names were separated by semi-colon (';') this example regex
                              could be specified      (?:.*;)?([0-9]+)[^;]*;([0-9]+)[^;]*;([0-9]+)[^;]*$ Note that if no
                              READ_NAME_REGEX is specified, the read name is split on ':'.   For 5 element names, the
                              3rd, 4th and 5th elements are assumed to be tile, x and y values.   For 7 element names
                              (CASAVA 1.8), the 5th, 6th, and 7th elements are assumed to be tile, x and y values. 
                              Default value: <optimized capture of last three ':' separated fields as numeric values>.
                              This option can be set to 'null' to clear the default value. 

OPTICAL_DUPLICATE_PIXEL_DISTANCE=Integer
                              The maximum offset between two duplicate clusters in order to consider them optical
                              duplicates. The default is appropriate for unpatterned versions of the Illumina platform.
                              For the patterned flowcell models, 2500 is moreappropriate. For other platforms and
                              models, users should experiment to find what works best.  Default value: 100. This option
                              can be set to 'null' to clear the default value. 

MAX_OPTICAL_DUPLICATE_SET_SIZE=Long
                              This number is the maximum size of a set of duplicate reads for which we will attempt to
                              determine which are optical duplicates.  Please be aware that if you raise this value too
                              high and do encounter a very large set of duplicate reads, it will severely affect the
                              runtime of this tool.  To completely disable this check, set the value to -1.  Default
                              value: 300000. This option can be set to 'null' to clear the default value. 

Using GATK jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar
Running:
    java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar BaseRecalibrator -I Starting Mark Duplicates: Marks duplicate reads in the BAM file using Picard. Error in Mark Duplicates. Exiting. -R /home/lchanem1/data-abattle4/lakshmi/hs37d5.fa --known-sites /home/lchanem1/data-abattle4/lakshmi/dbsnp132_20101103.vcf.gz -O /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1_recal_data.table
USAGE: BaseRecalibrator [arguments]

First pass of the Base Quality Score Recalibration (BQSR) -- Generates recalibration table based on various
user-specified covariates (such as read group, reported quality score, machine cycle, and nucleotide context).
Version:4.5.0.0


Required Arguments:

--input,-I <GATKPath>         BAM/SAM/CRAM file containing reads  This argument must be specified at least once.
                              Required. 

--known-sites <FeatureInput>  One or more databases of known polymorphic sites used to exclude regions around known
                              polymorphisms from analysis.  This argument must be specified at least once. Required. 

--output,-O <GATKPath>        The output recalibration table file to create  Required. 

--reference,-R <GATKPath>     Reference sequence file  Required. 


Optional Arguments:

--add-output-sam-program-record <Boolean>
                              If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible
                              values: {true, false} 

--add-output-vcf-command-line <Boolean>
                              If true, adds a command line header line to created VCF files.  Default value: true.
                              Possible values: {true, false} 

--arguments_file <File>       read one or more arguments files and add them to the command line  This argument may be
                              specified 0 or more times. Default value: null. 

--binary-tag-name <String>    the binary tag covariate name if using it  Default value: null. 

--bqsr-baq-gap-open-penalty <Double>
                              BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for
                              whole genome call sets  Default value: 40.0. 

--cloud-index-prefetch-buffer,-CIPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to
                              cloudPrefetchBuffer if unset.  Default value: -1. 

--cloud-prefetch-buffer,-CPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40. 

--create-output-bam-index,-OBI <Boolean>
                              If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default
                              value: true. Possible values: {true, false} 

--create-output-bam-md5,-OBM <Boolean>
                              If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.
                              Possible values: {true, false} 

--create-output-variant-index,-OVI <Boolean>
                              If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:
                              true. Possible values: {true, false} 

--create-output-variant-md5,-OVM <Boolean>
                              If true, create a a MD5 digest any VCF file created.  Default value: false. Possible
                              values: {true, false} 

--default-base-qualities <Byte>
                              Assign a default base quality  Default value: -1. 

--deletions-default-quality <Byte>
                              default quality for the base deletions covariate  Default value: 45. 

--disable-bam-index-caching,-DBIC <Boolean>
                              If true, don't cache bam indexes, this will reduce memory requirements but may harm
                              performance if many intervals are specified.  Caching is automatically disabled if there
                              are no intervals specified.  Default value: false. Possible values: {true, false} 

--disable-read-filter,-DF <String>
                              Read filters to be disabled before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {MappedReadFilter,
                              MappingQualityAvailableReadFilter, MappingQualityNotZeroReadFilter,
                              NotDuplicateReadFilter, NotSecondaryAlignmentReadFilter,
                              PassesVendorQualityCheckReadFilter, WellformedReadFilter} 

--disable-sequence-dictionary-validation <Boolean>
                              If specified, do not check the sequence dictionaries from our inputs for compatibility.
                              Use at your own risk!  Default value: false. Possible values: {true, false} 

--exclude-intervals,-XL <String>
                              One or more genomic intervals to exclude from processing  This argument may be specified 0
                              or more times. Default value: null. 

--gatk-config-file <String>   A configuration file to use with the GATK.  Default value: null. 

--gcs-max-retries,-gcs-retries <Integer>
                              If the GCS bucket channel errors out, how many times it will attempt to re-initiate the
                              connection  Default value: 20. 

--gcs-project-for-requester-pays <String>
                              Project to bill when accessing "requester pays" buckets. If unset, these buckets cannot be
                              accessed.  User must have storage.buckets.get permission on the bucket being accessed. 
                              Default value: . 

--help,-h <Boolean>           display the help message  Default value: false. Possible values: {true, false} 

--indels-context-size,-ics <Integer>
                              Size of the k-mer context to be used for base insertions and deletions  Default value: 3. 

--insertions-default-quality <Byte>
                              default quality for the base insertions covariate  Default value: 45. 

--interval-exclusion-padding,-ixp <Integer>
                              Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0. 

--interval-merging-rule,-imr <IntervalMergingRule>
                              Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL,
                              OVERLAPPING_ONLY} 

--interval-padding,-ip <Integer>
                              Amount of padding (in bp) to add to each interval you are including.  Default value: 0. 

--interval-set-rule,-isr <IntervalSetRule>
                              Set merging approach to use for combining interval inputs  Default value: UNION. Possible
                              values: {UNION, INTERSECTION} 

--intervals,-L <String>       One or more genomic intervals over which to operate  This argument may be specified 0 or
                              more times. Default value: null. 

--lenient,-LE <Boolean>       Lenient processing of VCF files  Default value: false. Possible values: {true, false} 

--low-quality-tail <Byte>     minimum quality for the bases in the tail of the reads to be considered  Default value: 2.

--max-variants-per-shard <Integer>
                              If non-zero, partitions VCF output into shards, each containing up to the given number of
                              records.  Default value: 0. 

--maximum-cycle-value,-max-cycle <Integer>
                              The maximum cycle value permitted for the Cycle covariate  Default value: 500. 

--mismatches-context-size,-mcs <Integer>
                              Size of the k-mer context to be used for base mismatches  Default value: 2. 

--mismatches-default-quality <Byte>
                              default quality for the base mismatches covariate  Default value: -1. 

--preserve-qscores-less-than <Integer>
                              Don't recalibrate bases with quality scores less than this threshold (with -bqsr)  Default
                              value: 6. 

--quantizing-levels <Integer> number of distinct quality scores in the quantized output  Default value: 16. 

--QUIET <Boolean>             Whether to suppress job-summary info on System.err.  Default value: false. Possible
                              values: {true, false} 

--read-filter,-RF <String>    Read filters to be applied before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {AlignmentAgreesWithHeaderReadFilter,
                              AllowAllReadsReadFilter, AmbiguousBaseReadFilter, CigarContainsNoNOperator,
                              ExcessiveEndClippedReadFilter, FirstOfPairReadFilter,
                              FlowBasedTPAttributeSymetricReadFilter, FlowBasedTPAttributeValidReadFilter,
                              FragmentLengthReadFilter, GoodCigarReadFilter, HasReadGroupReadFilter,
                              HmerQualitySymetricReadFilter, IntervalOverlapReadFilter,
                              JexlExpressionReadTagValueFilter, LibraryReadFilter, MappedReadFilter,
                              MappingQualityAvailableReadFilter, MappingQualityNotZeroReadFilter,
                              MappingQualityReadFilter, MatchingBasesAndQualsReadFilter, MateDifferentStrandReadFilter,
                              MateDistantReadFilter, MateOnSameContigOrNoMappedMateReadFilter,
                              MateUnmappedAndUnmappedReadFilter, MetricsReadFilter,
                              NonChimericOriginalAlignmentReadFilter, NonZeroFragmentLengthReadFilter,
                              NonZeroReferenceLengthAlignmentReadFilter, NotDuplicateReadFilter,
                              NotOpticalDuplicateReadFilter, NotProperlyPairedReadFilter,
                              NotSecondaryAlignmentReadFilter, NotSupplementaryAlignmentReadFilter,
                              OverclippedReadFilter, PairedReadFilter, PassesVendorQualityCheckReadFilter,
                              PlatformReadFilter, PlatformUnitReadFilter, PrimaryLineReadFilter,
                              ProperlyPairedReadFilter, ReadGroupBlackListReadFilter, ReadGroupHasFlowOrderReadFilter,
                              ReadGroupReadFilter, ReadLengthEqualsCigarLengthReadFilter, ReadLengthReadFilter,
                              ReadNameReadFilter, ReadStrandFilter, ReadTagValueFilter, SampleReadFilter,
                              SecondOfPairReadFilter, SeqIsStoredReadFilter, SoftClippedReadFilter,
                              ValidAlignmentEndReadFilter, ValidAlignmentStartReadFilter, WellformedFlowBasedReadFilter,
                              WellformedReadFilter} 

--read-index <GATKPath>       Indices to use for the read inputs. If specified, an index must be provided for every read
                              input and in the same order as the read inputs. If this argument is not specified, the
                              path to the index for each input will be inferred automatically.  This argument may be
                              specified 0 or more times. Default value: null. 

--read-validation-stringency,-VS <ValidationStringency>
                              Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default
                              stringency value SILENT can improve performance when processing a BAM file in which
                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default
                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT} 

--seconds-between-progress-updates <Double>
                              Output traversal statistics every time this many seconds elapse  Default value: 10.0. 

--sequence-dictionary <GATKPath>
                              Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a
                              .dict file.  Default value: null. 

--sites-only-vcf-output <Boolean>
                              If true, don't emit genotype fields when writing vcf file output.  Default value: false.
                              Possible values: {true, false} 

--tmp-dir <GATKPath>          Temp directory to use.  Default value: null. 

--use-jdk-deflater,-jdk-deflater <Boolean>
                              Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.
                              Possible values: {true, false} 

--use-jdk-inflater,-jdk-inflater <Boolean>
                              Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.
                              Possible values: {true, false} 

--use-original-qualities,-OQ <Boolean>
                              Use the base quality scores from the OQ tag  Default value: false. Possible values: {true,
                              false} 

--verbosity <LogLevel>        Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,
                              INFO, DEBUG} 

--version <Boolean>           display the version number for this tool  Default value: false. Possible values: {true,
                              false} 


Advanced Arguments:

--disable-tool-default-read-filters <Boolean>
                              Disable all tool default read filters (WARNING: many tools will not function correctly
                              without their default read filters on)  Default value: false. Possible values: {true,
                              false} 

--showHidden <Boolean>        display hidden arguments  Default value: false. Possible values: {true, false} 

Conditional Arguments for readFilter:

Valid only if "AmbiguousBaseReadFilter" is specified:
--ambig-filter-bases <Integer>Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,
                              overrides threshold fraction.  Default value: null.  Cannot be used in conjunction with
                              argument(s) maxAmbiguousBaseFraction

--ambig-filter-frac <Double>  Threshold fraction of ambiguous bases  Default value: 0.05.  Cannot be used in conjunction
                              with argument(s) maxAmbiguousBases

Valid only if "ExcessiveEndClippedReadFilter" is specified:
--max-clipped-bases <Integer> Maximum number of clipped bases on either end of a given read  Default value: 1000. 

Valid only if "FlowBasedTPAttributeValidReadFilter" is specified:
--read-filter-max-hmer <Integer>
                              maxHmer to use for testing in the filter  Default value: 12. 

Valid only if "FragmentLengthReadFilter" is specified:
--max-fragment-length <Integer>
                              Maximum length of fragment (insert size)  Default value: 1000000. 

--min-fragment-length <Integer>
                              Minimum length of fragment (insert size)  Default value: 0. 

Valid only if "IntervalOverlapReadFilter" is specified:
--keep-intervals <String>     One or more genomic intervals to keep  This argument must be specified at least once.
                              Required. 

Valid only if "JexlExpressionReadTagValueFilter" is specified:
--read-filter-expression <String>
                              One or more JEXL expressions used to filter  This argument must be specified at least
                              once. Required. 

Valid only if "LibraryReadFilter" is specified:
--library <String>            Name of the library to keep  This argument must be specified at least once. Required. 

Valid only if "MappingQualityReadFilter" is specified:
--maximum-mapping-quality <Integer>
                              Maximum mapping quality to keep (inclusive)  Default value: null. 

--minimum-mapping-quality <Integer>
                              Minimum mapping quality to keep (inclusive)  Default value: 10. 

Valid only if "MateDistantReadFilter" is specified:
--mate-too-distant-length <Integer>
                              Minimum start location difference at which mapped mates are considered distant  Default
                              value: 1000. 

Valid only if "OverclippedReadFilter" is specified:
--dont-require-soft-clips-both-ends <Boolean>
                              Allow a read to be filtered out based on having only 1 soft-clipped block. By default,
                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped
                              block  Default value: false. Possible values: {true, false} 

--filter-too-short <Integer>  Minimum number of aligned bases  Default value: 30. 

Valid only if "PlatformReadFilter" is specified:
--platform-filter-name <String>
                              Platform attribute (PL) to match  This argument must be specified at least once. Required.

Valid only if "PlatformUnitReadFilter" is specified:
--black-listed-lanes <String> Platform unit (PU) to filter out  This argument must be specified at least once. Required.

Valid only if "ReadGroupBlackListReadFilter" is specified:
--read-group-black-list <String>
                              A read group filter expression in the form "attribute:value", where "attribute" is a two
                              character read group attribute such as "RG" or "PU".  This argument must be specified at
                              least once. Required. 

Valid only if "ReadGroupReadFilter" is specified:
--keep-read-group <String>    The name of the read group to keep  Required. 

Valid only if "ReadLengthReadFilter" is specified:
--max-read-length <Integer>   Keep only reads with length at most equal to the specified value  Required. 

--min-read-length <Integer>   Keep only reads with length at least equal to the specified value  Default value: 1. 

Valid only if "ReadNameReadFilter" is specified:
--read-name <String>          Keep only reads with this read name  This argument must be specified at least once.
                              Required. 

Valid only if "ReadStrandFilter" is specified:
--keep-reverse-strand-only <Boolean>
                              Keep only reads on the reverse strand  Required. Possible values: {true, false} 

Valid only if "ReadTagValueFilter" is specified:
--read-filter-tag <String>    Look for this tag in read  Required. 

--read-filter-tag-comp <Float>Compare value in tag to this value  Default value: 0.0. 

--read-filter-tag-op <Operator>
                              Compare value in tag to value with this operator. If T is the value in the tag, OP is the
                              operation provided, and V is the value in read-filter-tag, then the read will pass the
                              filter iff T OP V is true.  Default value: EQUAL. Possible values: {LESS, LESS_OR_EQUAL,
                              GREATER, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL} 

Valid only if "SampleReadFilter" is specified:
--sample <String>             The name of the sample(s) to keep, filtering out all others  This argument must be
                              specified at least once. Required. 

Valid only if "SoftClippedReadFilter" is specified:
--invert-soft-clip-ratio-filter <Boolean>
                              Inverts the results from this filter, causing all variants that would pass to fail and
                              visa-versa.  Default value: false. Possible values: {true, false} 

--soft-clipped-leading-trailing-ratio <Double>
                              Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases
                              in read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumSoftClippedRatio

--soft-clipped-ratio-threshold <Double>
                              Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in
                              read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumLeadingTrailingSoftClippedRatio


***********************************************************************

A USER ERROR has occurred: Illegal argument value: Positional arguments were provided ',Mark{Duplicates:{Marks{duplicate{reads{in{the{BAM{file{using{Picard.{Error{in{Mark{Duplicates.{Exiting.}' but no positional argument is defined for this tool.

***********************************************************************
Set the system property GATK_STACKTRACE_ON_USER_EXCEPTION (--java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true') to print the stack trace.
Using GATK jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar
Running:
    java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar HaplotypeCaller -I Starting Base Quality Recalibration: Performs base quality score recalibration with GATK. Error in Base Quality Recalibration. Exiting. -R /home/lchanem1/data-abattle4/lakshmi/hs37d5.fa -ERC GVCF -O /home/lchanem1/data-abattle4/lakshmi/cuomo_2020/gatk_output/output/zihe_1.g.vcf.gz
USAGE: HaplotypeCaller [arguments]

Call germline SNPs and indels via local re-assembly of haplotypes
Version:4.5.0.0


Required Arguments:

--input,-I <GATKPath>         BAM/SAM/CRAM file containing reads  This argument must be specified at least once.
                              Required. 

--output,-O <GATKPath>        File to which variants should be written  Required. 

--reference,-R <GATKPath>     Reference sequence file  Required. 


Optional Arguments:

--add-output-sam-program-record <Boolean>
                              If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible
                              values: {true, false} 

--add-output-vcf-command-line <Boolean>
                              If true, adds a command line header line to created VCF files.  Default value: true.
                              Possible values: {true, false} 

--alleles <FeatureInput>      The set of alleles to force-call regardless of evidence  Default value: null. 

--annotate-with-num-discovered-alleles <Boolean>
                              If provided, we will annotate records with the number of alternate alleles that were
                              discovered (but not necessarily genotyped) at a given site  Default value: false. Possible
                              values: {true, false} 

--annotation,-A <String>      One or more specific annotations to add to variant calls  This argument may be specified 0
                              or more times. Default value: null. Possible values: {AlleleFraction, AllelePseudoDepth,
                              AS_BaseQualityRankSumTest, AS_FisherStrand, AS_InbreedingCoeff,
                              AS_MappingQualityRankSumTest, AS_QualByDepth, AS_ReadPosRankSumTest, AS_RMSMappingQuality,
                              AS_StrandBiasMutectAnnotation, AS_StrandOddsRatio, AssemblyComplexity, BaseQuality,
                              BaseQualityHistogram, BaseQualityRankSumTest, ChromosomeCounts, ClippingRankSumTest,
                              CountNs, Coverage, CycleSkipStatus, DepthPerAlleleBySample, DepthPerSampleHC, ExcessHet,
                              FeaturizedReadSets, FisherStrand, FragmentDepthPerAlleleBySample, FragmentLength,
                              GcContent, GenotypeSummaries, HaplotypeFilteringAnnotation, HmerIndelLength, HmerIndelNuc,
                              HmerMotifs, InbreedingCoeff, IndelClassify, IndelLength, LikelihoodRankSumTest,
                              MappingQuality, MappingQualityRankSumTest, MappingQualityZero, OrientationBiasReadCounts,
                              OriginalAlignment, PossibleDeNovo, QualByDepth, RawGtCount, ReadPosition,
                              ReadPosRankSumTest, ReferenceBases, RMSMappingQuality, SampleList, StrandBiasBySample,
                              StrandOddsRatio, TandemRepeat, TransmittedSingleton, UniqueAltReadCount, VariantType} 

--annotation-group,-G <String>One or more groups of annotations to apply to variant calls  This argument may be
                              specified 0 or more times. Default value: null. Possible values:
                              {AlleleSpecificAnnotation, AS_StandardAnnotation, GenotypeAnnotation, InfoFieldAnnotation,
                              JumboGenotypeAnnotation, JumboInfoAnnotation, ReducibleAnnotation, StandardAnnotation,
                              StandardFlowBasedAnnotation, StandardHCAnnotation, StandardMutectAnnotation,
                              VariantAnnotation} 

--annotations-to-exclude,-AX <String>
                              One or more specific annotations to exclude from variant calls  This argument may be
                              specified 0 or more times. Default value: null. Possible values: {BaseQualityRankSumTest,
                              ChromosomeCounts, Coverage, DepthPerAlleleBySample, DepthPerSampleHC, ExcessHet,
                              FisherStrand, InbreedingCoeff, MappingQualityRankSumTest, QualByDepth, ReadPosRankSumTest,
                              RMSMappingQuality, StrandOddsRatio} 

--arguments_file <File>       read one or more arguments files and add them to the command line  This argument may be
                              specified 0 or more times. Default value: null. 

--assembly-region-out <String>Output the assembly region to this IGV formatted file  Default value: null. 

--assembly-region-padding <Integer>
                              Number of additional bases of context to include around each assembly region  Default
                              value: 100. 

--base-quality-score-threshold <Byte>
                              Base qualities below this threshold will be reduced to the minimum (6)  Default value: 18.

--cloud-index-prefetch-buffer,-CIPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to
                              cloudPrefetchBuffer if unset.  Default value: -1. 

--cloud-prefetch-buffer,-CPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40. 

--contamination-fraction-to-filter,-contamination <Double>
                              Fraction of contamination in sequencing data (for all samples) to aggressively remove 
                              Default value: 0.0. 

--create-output-bam-index,-OBI <Boolean>
                              If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default
                              value: true. Possible values: {true, false} 

--create-output-bam-md5,-OBM <Boolean>
                              If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.
                              Possible values: {true, false} 

--create-output-variant-index,-OVI <Boolean>
                              If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:
                              true. Possible values: {true, false} 

--create-output-variant-md5,-OVM <Boolean>
                              If true, create a a MD5 digest any VCF file created.  Default value: false. Possible
                              values: {true, false} 

--dbsnp,-D <FeatureInput>     dbSNP file  Default value: null. 

--disable-bam-index-caching,-DBIC <Boolean>
                              If true, don't cache bam indexes, this will reduce memory requirements but may harm
                              performance if many intervals are specified.  Caching is automatically disabled if there
                              are no intervals specified.  Default value: false. Possible values: {true, false} 

--disable-read-filter,-DF <String>
                              Read filters to be disabled before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {GoodCigarReadFilter, MappedReadFilter,
                              MappingQualityAvailableReadFilter, MappingQualityReadFilter,
                              NonZeroReferenceLengthAlignmentReadFilter, NotDuplicateReadFilter,
                              NotSecondaryAlignmentReadFilter, PassesVendorQualityCheckReadFilter, WellformedReadFilter}

--disable-sequence-dictionary-validation <Boolean>
                              If specified, do not check the sequence dictionaries from our inputs for compatibility.
                              Use at your own risk!  Default value: false. Possible values: {true, false} 

--dont-use-dragstr-pair-hmm-scores <Boolean>
                              disable DRAGstr pair-hmm score even when dragstr-params-path was provided  Default value:
                              false. Possible values: {true, false} 

--dont-use-soft-clipped-bases <Boolean>
                              Do not analyze soft clipped bases in the reads  Default value: false. Possible values:
                              {true, false} 

--dragen-mode <Boolean>       Single argument for enabling the bulk of DRAGEN-GATK features. NOTE: THIS WILL OVERWRITE
                              PROVIDED ARGUMENT CHECK TOOL INFO TO SEE WHICH ARGUMENTS ARE SET).  Default value: false.
                              Possible values: {true, false}  Cannot be used in conjunction with argument(s)
                              dragen378Mode

--dragstr-het-hom-ratio <Integer>
                              het to hom prior ratio use with DRAGstr on  Default value: 2. 

--dragstr-params-path <GATKPath>
                              location of the DRAGstr model parameters for STR error correction used in the Pair HMM.
                              When provided, it overrides other PCR error correcting mechanisms  Default value: null. 

--enable-dynamic-read-disqualification-for-genotyping <Boolean>
                              Will enable less strict read disqualification low base quality reads  Default value:
                              false. Possible values: {true, false} 

--exclude-intervals,-XL <String>
                              One or more genomic intervals to exclude from processing  This argument may be specified 0
                              or more times. Default value: null. 

--flow-order-for-annotations <String>
                              flow order used for this annotations. [readGroup:]flowOrder  This argument may be
                              specified 0 or more times. Default value: null. 

--founder-id <String>         Samples representing the population "founders"  This argument may be specified 0 or more
                              times. Default value: null. 

--gatk-config-file <String>   A configuration file to use with the GATK.  Default value: null. 

--gcs-max-retries,-gcs-retries <Integer>
                              If the GCS bucket channel errors out, how many times it will attempt to re-initiate the
                              connection  Default value: 20. 

--gcs-project-for-requester-pays <String>
                              Project to bill when accessing "requester pays" buckets. If unset, these buckets cannot be
                              accessed.  User must have storage.buckets.get permission on the bucket being accessed. 
                              Default value: . 

--genotype-assignment-method,-gam <GenotypeAssignmentMethod>
                              How we assign genotypes  Default value: USE_PLS_TO_ASSIGN. Possible values:
                              {SET_TO_NO_CALL, USE_PLS_TO_ASSIGN, USE_POSTERIORS_ANNOTATION,
                              SET_TO_NO_CALL_NO_ANNOTATIONS, BEST_MATCH_TO_ORIGINAL, DO_NOT_ASSIGN_GENOTYPES,
                              USE_POSTERIOR_PROBABILITIES, PREFER_PLS} 

--graph-output,-graph <String>Write debug assembly graph information to this file  Default value: null. 

--help,-h <Boolean>           display the help message  Default value: false. Possible values: {true, false} 

--heterozygosity <Double>     Heterozygosity value used to compute prior probabilities for any locus.  See the GATKDocs
                              for full details on the meaning of this population genetics concept  Default value: 0.001.

--heterozygosity-stdev <Double>
                              Standard deviation of heterozygosity for SNP and indel calling.  Default value: 0.01. 

--indel-heterozygosity <Double>
                              Heterozygosity for indel calling.  See the GATKDocs for heterozygosity for full details on
                              the meaning of this population genetics concept  Default value: 1.25E-4. 

--interval-exclusion-padding,-ixp <Integer>
                              Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0. 

--interval-merging-rule,-imr <IntervalMergingRule>
                              Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL,
                              OVERLAPPING_ONLY} 

--interval-padding,-ip <Integer>
                              Amount of padding (in bp) to add to each interval you are including.  Default value: 0. 

--interval-set-rule,-isr <IntervalSetRule>
                              Set merging approach to use for combining interval inputs  Default value: UNION. Possible
                              values: {UNION, INTERSECTION} 

--intervals,-L <String>       One or more genomic intervals over which to operate  This argument may be specified 0 or
                              more times. Default value: null. 

--lenient,-LE <Boolean>       Lenient processing of VCF files  Default value: false. Possible values: {true, false} 

--max-assembly-region-size <Integer>
                              Maximum size of an assembly region  Default value: 300. 

--max-reads-per-alignment-start <Integer>
                              Maximum number of reads to retain per alignment start position. Reads above this threshold
                              will be downsampled. Set to 0 to disable.  Default value: 50. 

--max-variants-per-shard <Integer>
                              If non-zero, partitions VCF output into shards, each containing up to the given number of
                              records.  Default value: 0. 

--min-assembly-region-size <Integer>
                              Minimum size of an assembly region  Default value: 50. 

--min-base-quality-score,-mbq <Byte>
                              Minimum base quality required to consider a base for calling  Default value: 10. 

--native-pair-hmm-threads <Integer>
                              How many threads should a native pairHMM implementation use  Default value: 4. 

--native-pair-hmm-use-double-precision <Boolean>
                              use double precision in the native pairHmm. This is slower but matches the java
                              implementation better  Default value: false. Possible values: {true, false} 

--num-reference-samples-if-no-call <Integer>
                              Number of hom-ref genotypes to infer at sites not present in a panel  Default value: 0. 

--output-mode <OutputMode>    Specifies which type of calls we should output  Default value: EMIT_VARIANTS_ONLY.
                              Possible values: {EMIT_VARIANTS_ONLY, EMIT_ALL_CONFIDENT_SITES, EMIT_ALL_ACTIVE_SITES} 

--pedigree,-ped <GATKPath>    Pedigree file for determining the population "founders"  Default value: null. 

--ploidy-regions <FeatureInput>
                              Interval file with column specifying desired ploidy for genotyping models. Overrides
                              default ploidy and user-provided --ploidy argument in specific regions.  Default value:
                              null. 

--population-callset,-population <FeatureInput>
                              Callset to use in calculating genotype priors  Default value: null. 

--QUIET <Boolean>             Whether to suppress job-summary info on System.err.  Default value: false. Possible
                              values: {true, false} 

--read-filter,-RF <String>    Read filters to be applied before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {AlignmentAgreesWithHeaderReadFilter,
                              AllowAllReadsReadFilter, AmbiguousBaseReadFilter, CigarContainsNoNOperator,
                              ExcessiveEndClippedReadFilter, FirstOfPairReadFilter,
                              FlowBasedTPAttributeSymetricReadFilter, FlowBasedTPAttributeValidReadFilter,
                              FragmentLengthReadFilter, GoodCigarReadFilter, HasReadGroupReadFilter,
                              HmerQualitySymetricReadFilter, IntervalOverlapReadFilter,
                              JexlExpressionReadTagValueFilter, LibraryReadFilter, MappedReadFilter,
                              MappingQualityAvailableReadFilter, MappingQualityNotZeroReadFilter,
                              MappingQualityReadFilter, MatchingBasesAndQualsReadFilter, MateDifferentStrandReadFilter,
                              MateDistantReadFilter, MateOnSameContigOrNoMappedMateReadFilter,
                              MateUnmappedAndUnmappedReadFilter, MetricsReadFilter,
                              NonChimericOriginalAlignmentReadFilter, NonZeroFragmentLengthReadFilter,
                              NonZeroReferenceLengthAlignmentReadFilter, NotDuplicateReadFilter,
                              NotOpticalDuplicateReadFilter, NotProperlyPairedReadFilter,
                              NotSecondaryAlignmentReadFilter, NotSupplementaryAlignmentReadFilter,
                              OverclippedReadFilter, PairedReadFilter, PassesVendorQualityCheckReadFilter,
                              PlatformReadFilter, PlatformUnitReadFilter, PrimaryLineReadFilter,
                              ProperlyPairedReadFilter, ReadGroupBlackListReadFilter, ReadGroupHasFlowOrderReadFilter,
                              ReadGroupReadFilter, ReadLengthEqualsCigarLengthReadFilter, ReadLengthReadFilter,
                              ReadNameReadFilter, ReadStrandFilter, ReadTagValueFilter, SampleReadFilter,
                              SecondOfPairReadFilter, SeqIsStoredReadFilter, SoftClippedReadFilter,
                              ValidAlignmentEndReadFilter, ValidAlignmentStartReadFilter, WellformedFlowBasedReadFilter,
                              WellformedReadFilter} 

--read-index <GATKPath>       Indices to use for the read inputs. If specified, an index must be provided for every read
                              input and in the same order as the read inputs. If this argument is not specified, the
                              path to the index for each input will be inferred automatically.  This argument may be
                              specified 0 or more times. Default value: null. 

--read-validation-stringency,-VS <ValidationStringency>
                              Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default
                              stringency value SILENT can improve performance when processing a BAM file in which
                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default
                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT} 

--recover-dangling-heads <Boolean>
                              This argument is DEPRECATED (This feature is deprecated and will be removed in a future
                              release.). This argument is deprecated since version 3.3  Default value: false. Possible
                              values: {true, false} 

--sample-name,-ALIAS <String> Name of single sample to use from a multi-sample bam  Default value: null. 

--sample-ploidy,-ploidy <Integer>
                              Ploidy (number of chromosomes) per sample. For pooled data, set to (Number of samples in
                              each pool * Sample Ploidy).  Default value: 2. 

--seconds-between-progress-updates <Double>
                              Output traversal statistics every time this many seconds elapse  Default value: 10.0. 

--sequence-dictionary <GATKPath>
                              Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a
                              .dict file.  Default value: null. 

--sites-only-vcf-output <Boolean>
                              If true, don't emit genotype fields when writing vcf file output.  Default value: false.
                              Possible values: {true, false} 

--standard-min-confidence-threshold-for-calling,-stand-call-conf <Double>
                              The minimum phred-scaled confidence threshold at which variants should be called  Default
                              value: 30.0. 

--tmp-dir <GATKPath>          Temp directory to use.  Default value: null. 

--use-jdk-deflater,-jdk-deflater <Boolean>
                              Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.
                              Possible values: {true, false} 

--use-jdk-inflater,-jdk-inflater <Boolean>
                              Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.
                              Possible values: {true, false} 

--use-new-qual-calculator,-new-qual <Boolean>
                              This argument is DEPRECATED (New qual score is on by default). Use the new AF model
                              instead of the so-called exact model  Default value: true. Possible values: {true, false} 

--use-pdhmm <Boolean>         Partially Determined HMM, an alternative to the regular assembly haplotypes where we
                              instead construct artificial haplotypes out of the union of the assembly and pileup
                              alleles.  Default value: false. Possible values: {true, false} 

--use-posteriors-to-calculate-qual,-gp-qual <Boolean>
                              if available, use the genotype posterior probabilities to calculate the site QUAL  Default
                              value: false. Possible values: {true, false} 

--verbosity <LogLevel>        Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,
                              INFO, DEBUG} 

--version <Boolean>           display the version number for this tool  Default value: false. Possible values: {true,
                              false} 


Advanced Arguments:

--active-probability-threshold <Double>
                              Minimum probability for a locus to be considered active.  Default value: 0.002. 

--adaptive-pruning <Boolean>  Use Mutect2's adaptive graph pruning algorithm  Default value: false. Possible values:
                              {true, false} 

--adaptive-pruning-initial-error-rate <Double>
                              Initial base error rate estimate for adaptive pruning  Default value: 0.001. 

--all-site-pls <Boolean>      Annotate all sites with PLs  Default value: false. Possible values: {true, false} 

--allele-informative-reads-overlap-margin <Integer>
                              Likelihood and read-based annotations will only take into consideration reads that overlap
                              the variant or any base no further than this distance expressed in base pairs  Default
                              value: 2. 

--allow-non-unique-kmers-in-ref <Boolean>
                              Allow graphs that have non-unique kmers in the reference  Default value: false. Possible
                              values: {true, false} 

--apply-bqd <Boolean>         If enabled this argument will apply the DRAGEN-GATK BaseQualityDropout model to the
                              genotyping model for filtering sites due to Linked Error mode.  Default value: false.
                              Possible values: {true, false} 

--apply-frd <Boolean>         If enabled this argument will apply the DRAGEN-GATK ForeignReadDetection model to the
                              genotyping model for filtering sites.  Default value: false. Possible values: {true,
                              false} 

--bam-output,-bamout <String> File to which assembled haplotypes should be written  Default value: null. 

--bam-writer-type <WriterType>Which haplotypes should be written to the BAM  Default value: CALLED_HAPLOTYPES. Possible
                              values: {ALL_POSSIBLE_HAPLOTYPES, CALLED_HAPLOTYPES, NO_HAPLOTYPES,
                              CALLED_HAPLOTYPES_NO_READS} 

--comparison,-comp <FeatureInput>
                              Comparison VCF file(s)  This argument may be specified 0 or more times. Default value:
                              null. 

--contamination-fraction-per-sample-file,-contamination-file <File>
                              Tab-separated File containing fraction of contamination in sequencing data (per sample) to
                              aggressively remove. Format should be "<SampleID><TAB><Contamination>" (Contamination is
                              double) per line; No header.  Default value: null. 

--debug-assembly,-debug <Boolean>
                              Print out verbose debug information about each assembly region  Default value: false.
                              Possible values: {true, false} 

--disable-cap-base-qualities-to-map-quality <Boolean>
                              If false this disables capping of base qualities in the HMM to the mapping quality of the
                              read  Default value: false. Possible values: {true, false} 

--disable-optimizations <Boolean>
                              Don't skip calculations in ActiveRegions with no variants  Default value: false. Possible
                              values: {true, false} 

--disable-spanning-event-genotyping <Boolean>
                              If enabled this argument will disable inclusion of the '*' spanning event when genotyping
                              events that overlap deletions  Default value: false. Possible values: {true, false} 

--disable-symmetric-hmm-normalizing <Boolean>
                              Toggle to revive legacy behavior of asymmetrically normalizing the arguments to the
                              reference haplotype  Default value: false. Possible values: {true, false} 

--disable-tool-default-annotations <Boolean>
                              Disable all tool default annotations  Default value: false. Possible values: {true, false}

--disable-tool-default-read-filters <Boolean>
                              Disable all tool default read filters (WARNING: many tools will not function correctly
                              without their default read filters on)  Default value: false. Possible values: {true,
                              false} 

--do-not-correct-overlapping-quality <Boolean>
                              Disable overlapping base quality correction  Default value: false. Possible values: {true,
                              false} 

--do-not-run-physical-phasing <Boolean>
                              Disable physical phasing  Default value: false. Possible values: {true, false} 

--dont-increase-kmer-sizes-for-cycles <Boolean>
                              Disable iterating over kmer sizes when graph cycles are detected  Default value: false.
                              Possible values: {true, false} 

--dont-use-dragstr-priors <Boolean>
                              Forfeit the use of the DRAGstr model to calculate genotype priors. This argument does not
                              have any effect in the absence of DRAGstr model parameters (--dragstr-model-params) 
                              Default value: false. Possible values: {true, false} 

--dragen-378-concordance-mode <Boolean>
                              Single argument for enabling the bulk of DRAGEN-GATK features including new developments
                              for concordance against DRAGEN 3.7.8. NOTE: THIS WILL OVERWRITE PROVIDED ARGUMENT CHECK
                              TOOL INFO TO SEE WHICH ARGUMENTS ARE SET).  Default value: false. Possible values: {true,
                              false}  Cannot be used in conjunction with argument(s) dragen3412mode

--emit-ref-confidence,-ERC <ReferenceConfidenceMode>
                              Mode for emitting reference confidence scores (For Mutect2, this is a BETA feature) 
                              Default value: NONE. Possible values: {NONE, BP_RESOLUTION, GVCF} 

--enable-all-annotations <Boolean>
                              Use all possible annotations (not for the faint of heart)  Default value: false. Possible
                              values: {true, false} 

--expected-mismatch-rate-for-read-disqualification <Double>
                              Error rate used to set expectation for post HMM read disqualification based on mismatches 
                              Default value: 0.02. 

--floor-blocks <Boolean>      Output the band lower bound for each GQ block regardless of the data it represents 
                              Default value: false. Possible values: {true, false} 

--flow-assembly-collapse-partial-mode <Boolean>
                              Collapse long flow-based hmers only up to difference in reference  Default value: false.
                              Possible values: {true, false} 

--flow-disallow-probs-larger-than-call <Boolean>
                              Cap probabilities of error to 1 relative to base call  Default value: false. Possible
                              values: {true, false} 

--flow-fill-empty-bins-value <Double>
                              Value to fill the zeros of the matrix with  Default value: 0.001. 

--flow-filter-alleles <Boolean>
                              pre-filter alleles before genotyping  Default value: false. Possible values: {true, false}

--flow-filter-alleles-qual-threshold <Float>
                              Threshold for prefiltering alleles on quality  Default value: 30.0. 

--flow-filter-alleles-sor-threshold <Float>
                              Threshold for prefiltering alleles on SOR  Default value: 3.0. 

--flow-filter-lone-alleles <Boolean>
                              Remove also lone alleles during allele filtering  Default value: false. Possible values:
                              {true, false} 

--flow-lump-probs <Boolean>   Should all probabilities of insertion or deletion in the flow be combined together 
                              Default value: false. Possible values: {true, false} 

--flow-matrix-mods <String>   Modifications instructions to the read flow matrix. Format is src,dst{,src,dst}+. Example:
                              10,12,11,12 - these instructions will copy element 10 into 11 and 12  Default value: null.

--flow-mode <FlowMode>        Single argument for enabling the bulk of Flow Based features. NOTE: THIS WILL OVERWRITE
                              PROVIDED ARGUMENT CHECK TOOL INFO TO SEE WHICH ARGUMENTS ARE SET).  Default value: NONE.
                              Possible values: {NONE, STANDARD, ADVANCED} 

--flow-probability-scaling-factor <Integer>
                              probability scaling factor for (phred=10) for probability quantization  Default value: 10.

--flow-probability-threshold <Double>
                              Lowest probability ratio to be used as an option  Default value: 0.003. 

--flow-quantization-bins <Integer>
                              Number of bins for probability quantization  Default value: 121. 

--flow-remove-non-single-base-pair-indels <Boolean>
                              Should the probabilities of more then 1 indel be used  Default value: false. Possible
                              values: {true, false} 

--flow-remove-one-zero-probs <Boolean>
                              Remove probabilities of basecall of zero from non-zero genome  Default value: false.
                              Possible values: {true, false} 

--flow-report-insertion-or-deletion <Boolean>
                              Report either insertion or deletion, probability, not both  Default value: false. Possible
                              values: {true, false} 

--flow-retain-max-n-probs-base-format <Boolean>
                              Keep only hmer/2 probabilities (like in base format)  Default value: false. Possible
                              values: {true, false} 

--flow-symmetric-indel-probs <Boolean>
                              Should indel probabilities be symmetric in flow  Default value: false. Possible values:
                              {true, false} 

--flow-use-t0-tag <Boolean>   Use t0 tag if exists in the read to create flow matrix  Default value: false. Possible
                              values: {true, false} 

--force-active <Boolean>      If provided, all regions will be marked as active  Default value: false. Possible values:
                              {true, false} 

--force-call-filtered-alleles,-genotype-filtered-alleles <Boolean>
                              Force-call filtered alleles included in the resource specified by --alleles  Default
                              value: false. Possible values: {true, false} 

--gvcf-gq-bands,-GQB <Integer>Exclusive upper bounds for reference confidence GQ bands (must be in [1, 100] and
                              specified in increasing order)  This argument may be specified 0 or more times. Default
                              value: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                              24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
                              46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 70, 80, 90, 99]. 

--indel-size-to-eliminate-in-ref-model <Integer>
                              The size of an indel to check for in the reference model  Default value: 10. 

--keep-boundary-flows <Boolean>
                              prevent spreading of boundary flows.  Default value: false. Possible values: {true, false}

--kmer-size <Integer>         Kmer size to use in the read threading assembler  This argument may be specified 0 or more
                              times. Default value: [10, 25]. 

--likelihood-calculation-engine <Implementation>
                              What likelihood calculation engine to use to calculate the relative likelihood of reads vs
                              haplotypes  Default value: PairHMM. Possible values: {PairHMM, FlowBased, FlowBasedHMM} 

--linked-de-bruijn-graph <Boolean>
                              If enabled, the Assembly Engine will construct a Linked De Bruijn graph to recover better
                              haplotypes  Default value: false. Possible values: {true, false} 

--mapping-quality-threshold-for-genotyping <Integer>
                              Control the threshold for discounting reads from the genotyper due to mapping quality
                              after the active region detection and assembly steps but before genotyping. NOTE: this is
                              in contrast to the --minimum-mapping-quality argument which filters reads from all parts
                              of the HaplotypeCaller. If you would like to call genotypes with a different threshold
                              both arguments must be set.  Default value: 20. 

--max-alternate-alleles <Integer>
                              Maximum number of alternate alleles to genotype  Default value: 6. 

--max-effective-depth-adjustment-for-frd <Integer>
                              Set the maximum depth to modify FRD adjustment to in the event of high depth sites (0 to
                              disable)  Default value: 0. 

--max-genotype-count <Integer>Maximum number of genotypes to consider at any site  Default value: 1024. 

--max-mnp-distance,-mnp-dist <Integer>
                              Two or more phased substitutions separated by this distance or less are merged into MNPs. 
                              Default value: 0. 

--max-num-haplotypes-in-population <Integer>
                              Maximum number of haplotypes to consider for your population  Default value: 128. 

--max-prob-propagation-distance <Integer>
                              Upper limit on how many bases away probability mass can be moved around when calculating
                              the boundaries between active and inactive assembly regions  Default value: 50. 

--max-unpruned-variants <Integer>
                              Maximum number of variants in graph the adaptive pruner will allow  Default value: 100. 

--min-dangling-branch-length <Integer>
                              Minimum length of a dangling branch to attempt recovery  Default value: 4. 

--min-pruning <Integer>       Minimum support to not prune paths in the graph  Default value: 2. 

--num-pruning-samples <Integer>
                              Number of samples that must pass the minPruning threshold  Default value: 1. 

--pair-hmm-gap-continuation-penalty <Integer>
                              Flat gap continuation penalty for use in the Pair HMM  Default value: 10. 

--pair-hmm-implementation,-pairHMM <Implementation>
                              The PairHMM implementation to use for genotype likelihood calculations  Default value:
                              FASTEST_AVAILABLE. Possible values: {EXACT, ORIGINAL, LOGLESS_CACHING,
                              AVX_LOGLESS_CACHING, AVX_LOGLESS_CACHING_OMP, FASTEST_AVAILABLE} 

--pair-hmm-results-file <GATKPath>
                              File to write exact pairHMM inputs/outputs to for debugging purposes  Default value: null.

--pcr-indel-model <PCRErrorModel>
                              The PCR indel model to use  Default value: CONSERVATIVE. Possible values: {NONE, HOSTILE,
                              AGGRESSIVE, CONSERVATIVE} 

--phred-scaled-global-read-mismapping-rate <Integer>
                              The global assumed mismapping rate for reads  Default value: 45. 

--pileup-detection <Boolean>  If enabled, the variant caller will create pileup-based haplotypes in addition to the
                              assembly-based haplotype generation.  Default value: false. Possible values: {true, false}

--pruning-lod-threshold <Double>
                              Ln likelihood ratio threshold for adaptive pruning algorithm  Default value:
                              2.302585092994046. 

--pruning-seeding-lod-threshold <Double>
                              Ln likelihood ratio threshold for seeding subgraph of good variation in adaptive pruning
                              algorithm  Default value: 9.210340371976184. 

--recover-all-dangling-branches <Boolean>
                              Recover all dangling branches  Default value: false. Possible values: {true, false} 

--reference-model-deletion-quality <Byte>
                              The quality of deletion in the reference model  Default value: 30. 

--showHidden <Boolean>        display hidden arguments  Default value: false. Possible values: {true, false} 

--smith-waterman <Implementation>
                              Which Smith-Waterman implementation to use, generally FASTEST_AVAILABLE is the right
                              choice  Default value: FASTEST_AVAILABLE. Possible values: {FASTEST_AVAILABLE,
                              AVX_ENABLED, JAVA} 

--smith-waterman-dangling-end-gap-extend-penalty <Integer>
                              Smith-Waterman gap-extend penalty for dangling-end recovery.  Default value: -6. 

--smith-waterman-dangling-end-gap-open-penalty <Integer>
                              Smith-Waterman gap-open penalty for dangling-end recovery.  Default value: -110. 

--smith-waterman-dangling-end-match-value <Integer>
                              Smith-Waterman match value for dangling-end recovery.  Default value: 25. 

--smith-waterman-dangling-end-mismatch-penalty <Integer>
                              Smith-Waterman mismatch penalty for dangling-end recovery.  Default value: -50. 

--smith-waterman-haplotype-to-reference-gap-extend-penalty <Integer>
                              Smith-Waterman gap-extend penalty for haplotype-to-reference alignment.  Default value:
                              -11. 

--smith-waterman-haplotype-to-reference-gap-open-penalty <Integer>
                              Smith-Waterman gap-open penalty for haplotype-to-reference alignment.  Default value:
                              -260. 

--smith-waterman-haplotype-to-reference-match-value <Integer>
                              Smith-Waterman match value for haplotype-to-reference alignment.  Default value: 200. 

--smith-waterman-haplotype-to-reference-mismatch-penalty <Integer>
                              Smith-Waterman mismatch penalty for haplotype-to-reference alignment.  Default value:
                              -150. 

--smith-waterman-read-to-haplotype-gap-extend-penalty <Integer>
                              Smith-Waterman gap-extend penalty for read-to-haplotype alignment.  Default value: -5. 

--smith-waterman-read-to-haplotype-gap-open-penalty <Integer>
                              Smith-Waterman gap-open penalty for read-to-haplotype alignment.  Default value: -30. 

--smith-waterman-read-to-haplotype-match-value <Integer>
                              Smith-Waterman match value for read-to-haplotype alignment.  Default value: 10. 

--smith-waterman-read-to-haplotype-mismatch-penalty <Integer>
                              Smith-Waterman mismatch penalty for read-to-haplotype alignment.  Default value: -15. 

--soft-clip-low-quality-ends <Boolean>
                              If enabled will preserve low-quality read ends as softclips (used for DRAGEN-GATK BQD
                              genotyper model)  Default value: false. Possible values: {true, false} 

--transform-dragen-mapping-quality <Boolean>
                              If enabled this argument will map DRAGEN aligner aligned reads with mapping quality <=250
                              to scale up to MQ 50  Default value: false. Possible values: {true, false} 

--use-filtered-reads-for-annotations <Boolean>
                              Use the contamination-filtered read maps for the purposes of annotating variants  Default
                              value: false. Possible values: {true, false} 

--use-pdhmm-overlap-optimization <Boolean>
                              PDHMM: An optimization to PDHMM, if set this will skip running PDHMM haplotype
                              determination on reads that don't overlap (within a few bases) of the determined allele in
                              each haplotype. This substantially reduces the amount of read-haplotype comparisons at the
                              expense of ignoring read realignment mapping artifacts. (Requires '--use-pdhmm' argument) 
                              Default value: false. Possible values: {true, false} 

Conditional Arguments for annotation:

Valid only if "AllelePseudoDepth" is specified:
--dirichlet-keep-prior-in-count <Boolean>
                              By default we don't keep the prior use in the output counts ase it makes it easier to
                              interpretthis quantity as the number of supporting reads specially in low depth sites. We
                              this toggled the prior is included  Default value: false. Possible values: {true, false} 

--dirichlet-prior-pseudo-count <Double>
                              Pseudo-count used as prior for all alleles. The default is 1.0 resulting in a flat prior 
                              Default value: 1.0. 

--pseudo-count-weight-decay-rate <Double>
                              A what rate the weight of a read decreases base on its informativeness; e.g. 1.0 is linear
                              decay (default), 2.0 is for quadratic decay  Default value: 1.0. 

Valid only if "AssemblyComplexity" is specified:
--assembly-complexity-reference-mode <Boolean>
                              If enabled will treat the reference as the basis for assembly complexity as opposed to
                              estimated germline haplotypes  Default value: false. Possible values: {true, false} 

Valid only if "PossibleDeNovo" is specified:
--denovo-depth-threshold <Integer>
                              Minimum depth (DP) for all trio members to be considered for de novo calculation.  Default
                              value: 0. 

--denovo-parent-gq-threshold <Integer>
                              Minimum genotype quality for parents to be considered for de novo calculation (separate
                              from GQ thershold for full trio).  Default value: 20. 

Valid only if "RMSMappingQuality" is specified:
--allow-old-rms-mapping-quality-annotation-data <Boolean>
                              Override to allow old RMSMappingQuality annotated VCFs to function  Default value: false.
                              Possible values: {true, false} 

Conditional Arguments for readFilter:

Valid only if "AmbiguousBaseReadFilter" is specified:
--ambig-filter-bases <Integer>Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,
                              overrides threshold fraction.  Default value: null.  Cannot be used in conjunction with
                              argument(s) maxAmbiguousBaseFraction

--ambig-filter-frac <Double>  Threshold fraction of ambiguous bases  Default value: 0.05.  Cannot be used in conjunction
                              with argument(s) maxAmbiguousBases

Valid only if "ExcessiveEndClippedReadFilter" is specified:
--max-clipped-bases <Integer> Maximum number of clipped bases on either end of a given read  Default value: 1000. 

Valid only if "FlowBasedTPAttributeValidReadFilter" is specified:
--read-filter-max-hmer <Integer>
                              maxHmer to use for testing in the filter  Default value: 12. 

Valid only if "FragmentLengthReadFilter" is specified:
--max-fragment-length <Integer>
                              Maximum length of fragment (insert size)  Default value: 1000000. 

--min-fragment-length <Integer>
                              Minimum length of fragment (insert size)  Default value: 0. 

Valid only if "IntervalOverlapReadFilter" is specified:
--keep-intervals <String>     One or more genomic intervals to keep  This argument must be specified at least once.
                              Required. 

Valid only if "JexlExpressionReadTagValueFilter" is specified:
--read-filter-expression <String>
                              One or more JEXL expressions used to filter  This argument must be specified at least
                              once. Required. 

Valid only if "LibraryReadFilter" is specified:
--library <String>            Name of the library to keep  This argument must be specified at least once. Required. 

Valid only if "MappingQualityReadFilter" is specified:
--maximum-mapping-quality <Integer>
                              Maximum mapping quality to keep (inclusive)  Default value: null. 

--minimum-mapping-quality <Integer>
                              Minimum mapping quality to keep (inclusive)  Default value: 20. 

Valid only if "MateDistantReadFilter" is specified:
--mate-too-distant-length <Integer>
                              Minimum start location difference at which mapped mates are considered distant  Default
                              value: 1000. 

Valid only if "OverclippedReadFilter" is specified:
--dont-require-soft-clips-both-ends <Boolean>
                              Allow a read to be filtered out based on having only 1 soft-clipped block. By default,
                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped
                              block  Default value: false. Possible values: {true, false} 

--filter-too-short <Integer>  Minimum number of aligned bases  Default value: 30. 

Valid only if "PlatformReadFilter" is specified:
--platform-filter-name <String>
                              Platform attribute (PL) to match  This argument must be specified at least once. Required.

Valid only if "PlatformUnitReadFilter" is specified:
--black-listed-lanes <String> Platform unit (PU) to filter out  This argument must be specified at least once. Required.

Valid only if "ReadGroupBlackListReadFilter" is specified:
--read-group-black-list <String>
                              A read group filter expression in the form "attribute:value", where "attribute" is a two
                              character read group attribute such as "RG" or "PU".  This argument must be specified at
                              least once. Required. 

Valid only if "ReadGroupReadFilter" is specified:
--keep-read-group <String>    The name of the read group to keep  Required. 

Valid only if "ReadLengthReadFilter" is specified:
--max-read-length <Integer>   Keep only reads with length at most equal to the specified value  Required. 

--min-read-length <Integer>   Keep only reads with length at least equal to the specified value  Default value: 1. 

Valid only if "ReadNameReadFilter" is specified:
--read-name <String>          Keep only reads with this read name  This argument must be specified at least once.
                              Required. 

Valid only if "ReadStrandFilter" is specified:
--keep-reverse-strand-only <Boolean>
                              Keep only reads on the reverse strand  Required. Possible values: {true, false} 

Valid only if "ReadTagValueFilter" is specified:
--read-filter-tag <String>    Look for this tag in read  Required. 

--read-filter-tag-comp <Float>Compare value in tag to this value  Default value: 0.0. 

--read-filter-tag-op <Operator>
                              Compare value in tag to value with this operator. If T is the value in the tag, OP is the
                              operation provided, and V is the value in read-filter-tag, then the read will pass the
                              filter iff T OP V is true.  Default value: EQUAL. Possible values: {LESS, LESS_OR_EQUAL,
                              GREATER, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL} 

Valid only if "SampleReadFilter" is specified:
--sample <String>             The name of the sample(s) to keep, filtering out all others  This argument must be
                              specified at least once. Required. 

Valid only if "SoftClippedReadFilter" is specified:
--invert-soft-clip-ratio-filter <Boolean>
                              Inverts the results from this filter, causing all variants that would pass to fail and
                              visa-versa.  Default value: false. Possible values: {true, false} 

--soft-clipped-leading-trailing-ratio <Double>
                              Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases
                              in read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumSoftClippedRatio

--soft-clipped-ratio-threshold <Double>
                              Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in
                              read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumLeadingTrailingSoftClippedRatio


***********************************************************************

A USER ERROR has occurred: Illegal argument value: Positional arguments were provided ',Base{Quality{Recalibration:{Performs{base{quality{score{recalibration{with{GATK.{Error{in{Base{Quality{Recalibration.{Exiting.}' but no positional argument is defined for this tool.

***********************************************************************
Set the system property GATK_STACKTRACE_ON_USER_EXCEPTION (--java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true') to print the stack trace.
Starting Count Variants: Counts the number of variants using GATK.
Using GATK jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar
Running:
    java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /data/apps/extern/spack_on/gcc/9.3.0/gatk/4.5.0.0-7ffa5btwszplyagj4m6q2ytfye4ybuj7/bin/gatk-package-4.5.0.0-local.jar CountVariants -V Starting Variant Calling: Calls variants using GATK HaplotypeCaller. Error in Variant Calling. Exiting.
USAGE: CountVariants [arguments]

This tool counts the variant records in a VCF file, regardless of filter status. Because it counts the number of rows in
the VCF, it does not necessarily reflect the number of variant alleles. The count is printed to standard output (and may
optionally be written to a file)
Version:4.5.0.0


Required Arguments:

--variant,-V <GATKPath>       A VCF file containing variants  Required. 


Optional Arguments:

--add-output-sam-program-record <Boolean>
                              If true, adds a PG tag to created SAM/BAM/CRAM files.  Default value: true. Possible
                              values: {true, false} 

--add-output-vcf-command-line <Boolean>
                              If true, adds a command line header line to created VCF files.  Default value: true.
                              Possible values: {true, false} 

--arguments_file <File>       read one or more arguments files and add them to the command line  This argument may be
                              specified 0 or more times. Default value: null. 

--cloud-index-prefetch-buffer,-CIPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable). Defaults to
                              cloudPrefetchBuffer if unset.  Default value: -1. 

--cloud-prefetch-buffer,-CPB <Integer>
                              Size of the cloud-only prefetch buffer (in MB; 0 to disable).  Default value: 40. 

--create-output-bam-index,-OBI <Boolean>
                              If true, create a BAM/CRAM index when writing a coordinate-sorted BAM/CRAM file.  Default
                              value: true. Possible values: {true, false} 

--create-output-bam-md5,-OBM <Boolean>
                              If true, create a MD5 digest for any BAM/SAM/CRAM file created  Default value: false.
                              Possible values: {true, false} 

--create-output-variant-index,-OVI <Boolean>
                              If true, create a VCF index when writing a coordinate-sorted VCF file.  Default value:
                              true. Possible values: {true, false} 

--create-output-variant-md5,-OVM <Boolean>
                              If true, create a a MD5 digest any VCF file created.  Default value: false. Possible
                              values: {true, false} 

--disable-bam-index-caching,-DBIC <Boolean>
                              If true, don't cache bam indexes, this will reduce memory requirements but may harm
                              performance if many intervals are specified.  Caching is automatically disabled if there
                              are no intervals specified.  Default value: false. Possible values: {true, false} 

--disable-read-filter,-DF <String>
                              Read filters to be disabled before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {WellformedReadFilter} 

--disable-sequence-dictionary-validation <Boolean>
                              If specified, do not check the sequence dictionaries from our inputs for compatibility.
                              Use at your own risk!  Default value: false. Possible values: {true, false} 

--exclude-intervals,-XL <String>
                              One or more genomic intervals to exclude from processing  This argument may be specified 0
                              or more times. Default value: null. 

--gatk-config-file <String>   A configuration file to use with the GATK.  Default value: null. 

--gcs-max-retries,-gcs-retries <Integer>
                              If the GCS bucket channel errors out, how many times it will attempt to re-initiate the
                              connection  Default value: 20. 

--gcs-project-for-requester-pays <String>
                              Project to bill when accessing "requester pays" buckets. If unset, these buckets cannot be
                              accessed.  User must have storage.buckets.get permission on the bucket being accessed. 
                              Default value: . 

--help,-h <Boolean>           display the help message  Default value: false. Possible values: {true, false} 

--input,-I <GATKPath>         BAM/SAM/CRAM file containing reads  This argument may be specified 0 or more times.
                              Default value: null. 

--interval-exclusion-padding,-ixp <Integer>
                              Amount of padding (in bp) to add to each interval you are excluding.  Default value: 0. 

--interval-merging-rule,-imr <IntervalMergingRule>
                              Interval merging rule for abutting intervals  Default value: ALL. Possible values: {ALL,
                              OVERLAPPING_ONLY} 

--interval-padding,-ip <Integer>
                              Amount of padding (in bp) to add to each interval you are including.  Default value: 0. 

--interval-set-rule,-isr <IntervalSetRule>
                              Set merging approach to use for combining interval inputs  Default value: UNION. Possible
                              values: {UNION, INTERSECTION} 

--intervals,-L <String>       One or more genomic intervals over which to operate  This argument may be specified 0 or
                              more times. Default value: null. 

--lenient,-LE <Boolean>       Lenient processing of VCF files  Default value: false. Possible values: {true, false} 

--max-variants-per-shard <Integer>
                              If non-zero, partitions VCF output into shards, each containing up to the given number of
                              records.  Default value: 0. 

--output,-O <GATKPath>        Optional output file  Default value: null. 

--QUIET <Boolean>             Whether to suppress job-summary info on System.err.  Default value: false. Possible
                              values: {true, false} 

--read-filter,-RF <String>    Read filters to be applied before analysis  This argument may be specified 0 or more
                              times. Default value: null. Possible values: {AlignmentAgreesWithHeaderReadFilter,
                              AllowAllReadsReadFilter, AmbiguousBaseReadFilter, CigarContainsNoNOperator,
                              ExcessiveEndClippedReadFilter, FirstOfPairReadFilter,
                              FlowBasedTPAttributeSymetricReadFilter, FlowBasedTPAttributeValidReadFilter,
                              FragmentLengthReadFilter, GoodCigarReadFilter, HasReadGroupReadFilter,
                              HmerQualitySymetricReadFilter, IntervalOverlapReadFilter,
                              JexlExpressionReadTagValueFilter, LibraryReadFilter, MappedReadFilter,
                              MappingQualityAvailableReadFilter, MappingQualityNotZeroReadFilter,
                              MappingQualityReadFilter, MatchingBasesAndQualsReadFilter, MateDifferentStrandReadFilter,
                              MateDistantReadFilter, MateOnSameContigOrNoMappedMateReadFilter,
                              MateUnmappedAndUnmappedReadFilter, MetricsReadFilter,
                              NonChimericOriginalAlignmentReadFilter, NonZeroFragmentLengthReadFilter,
                              NonZeroReferenceLengthAlignmentReadFilter, NotDuplicateReadFilter,
                              NotOpticalDuplicateReadFilter, NotProperlyPairedReadFilter,
                              NotSecondaryAlignmentReadFilter, NotSupplementaryAlignmentReadFilter,
                              OverclippedReadFilter, PairedReadFilter, PassesVendorQualityCheckReadFilter,
                              PlatformReadFilter, PlatformUnitReadFilter, PrimaryLineReadFilter,
                              ProperlyPairedReadFilter, ReadGroupBlackListReadFilter, ReadGroupHasFlowOrderReadFilter,
                              ReadGroupReadFilter, ReadLengthEqualsCigarLengthReadFilter, ReadLengthReadFilter,
                              ReadNameReadFilter, ReadStrandFilter, ReadTagValueFilter, SampleReadFilter,
                              SecondOfPairReadFilter, SeqIsStoredReadFilter, SoftClippedReadFilter,
                              ValidAlignmentEndReadFilter, ValidAlignmentStartReadFilter, WellformedFlowBasedReadFilter,
                              WellformedReadFilter} 

--read-index <GATKPath>       Indices to use for the read inputs. If specified, an index must be provided for every read
                              input and in the same order as the read inputs. If this argument is not specified, the
                              path to the index for each input will be inferred automatically.  This argument may be
                              specified 0 or more times. Default value: null. 

--read-validation-stringency,-VS <ValidationStringency>
                              Validation stringency for all SAM/BAM/CRAM/SRA files read by this program.  The default
                              stringency value SILENT can improve performance when processing a BAM file in which
                              variable-length data (read, qualities, tags) do not otherwise need to be decoded.  Default
                              value: SILENT. Possible values: {STRICT, LENIENT, SILENT} 

--reference,-R <GATKPath>     Reference sequence  Default value: null. 

--seconds-between-progress-updates <Double>
                              Output traversal statistics every time this many seconds elapse  Default value: 10.0. 

--sequence-dictionary <GATKPath>
                              Use the given sequence dictionary as the master/canonical sequence dictionary.  Must be a
                              .dict file.  Default value: null. 

--sites-only-vcf-output <Boolean>
                              If true, don't emit genotype fields when writing vcf file output.  Default value: false.
                              Possible values: {true, false} 

--tmp-dir <GATKPath>          Temp directory to use.  Default value: null. 

--use-jdk-deflater,-jdk-deflater <Boolean>
                              Whether to use the JdkDeflater (as opposed to IntelDeflater)  Default value: false.
                              Possible values: {true, false} 

--use-jdk-inflater,-jdk-inflater <Boolean>
                              Whether to use the JdkInflater (as opposed to IntelInflater)  Default value: false.
                              Possible values: {true, false} 

--verbosity <LogLevel>        Control verbosity of logging.  Default value: INFO. Possible values: {ERROR, WARNING,
                              INFO, DEBUG} 

--version <Boolean>           display the version number for this tool  Default value: false. Possible values: {true,
                              false} 


Advanced Arguments:

--disable-tool-default-read-filters <Boolean>
                              Disable all tool default read filters (WARNING: many tools will not function correctly
                              without their default read filters on)  Default value: false. Possible values: {true,
                              false} 

--showHidden <Boolean>        display hidden arguments  Default value: false. Possible values: {true, false} 

Conditional Arguments for readFilter:

Valid only if "AmbiguousBaseReadFilter" is specified:
--ambig-filter-bases <Integer>Threshold number of ambiguous bases. If null, uses threshold fraction; otherwise,
                              overrides threshold fraction.  Default value: null.  Cannot be used in conjunction with
                              argument(s) maxAmbiguousBaseFraction

--ambig-filter-frac <Double>  Threshold fraction of ambiguous bases  Default value: 0.05.  Cannot be used in conjunction
                              with argument(s) maxAmbiguousBases

Valid only if "ExcessiveEndClippedReadFilter" is specified:
--max-clipped-bases <Integer> Maximum number of clipped bases on either end of a given read  Default value: 1000. 

Valid only if "FlowBasedTPAttributeValidReadFilter" is specified:
--read-filter-max-hmer <Integer>
                              maxHmer to use for testing in the filter  Default value: 12. 

Valid only if "FragmentLengthReadFilter" is specified:
--max-fragment-length <Integer>
                              Maximum length of fragment (insert size)  Default value: 1000000. 

--min-fragment-length <Integer>
                              Minimum length of fragment (insert size)  Default value: 0. 

Valid only if "IntervalOverlapReadFilter" is specified:
--keep-intervals <String>     One or more genomic intervals to keep  This argument must be specified at least once.
                              Required. 

Valid only if "JexlExpressionReadTagValueFilter" is specified:
--read-filter-expression <String>
                              One or more JEXL expressions used to filter  This argument must be specified at least
                              once. Required. 

Valid only if "LibraryReadFilter" is specified:
--library <String>            Name of the library to keep  This argument must be specified at least once. Required. 

Valid only if "MappingQualityReadFilter" is specified:
--maximum-mapping-quality <Integer>
                              Maximum mapping quality to keep (inclusive)  Default value: null. 

--minimum-mapping-quality <Integer>
                              Minimum mapping quality to keep (inclusive)  Default value: 10. 

Valid only if "MateDistantReadFilter" is specified:
--mate-too-distant-length <Integer>
                              Minimum start location difference at which mapped mates are considered distant  Default
                              value: 1000. 

Valid only if "OverclippedReadFilter" is specified:
--dont-require-soft-clips-both-ends <Boolean>
                              Allow a read to be filtered out based on having only 1 soft-clipped block. By default,
                              both ends must have a soft-clipped block, setting this flag requires only 1 soft-clipped
                              block  Default value: false. Possible values: {true, false} 

--filter-too-short <Integer>  Minimum number of aligned bases  Default value: 30. 

Valid only if "PlatformReadFilter" is specified:
--platform-filter-name <String>
                              Platform attribute (PL) to match  This argument must be specified at least once. Required.

Valid only if "PlatformUnitReadFilter" is specified:
--black-listed-lanes <String> Platform unit (PU) to filter out  This argument must be specified at least once. Required.

Valid only if "ReadGroupBlackListReadFilter" is specified:
--read-group-black-list <String>
                              A read group filter expression in the form "attribute:value", where "attribute" is a two
                              character read group attribute such as "RG" or "PU".  This argument must be specified at
                              least once. Required. 

Valid only if "ReadGroupReadFilter" is specified:
--keep-read-group <String>    The name of the read group to keep  Required. 

Valid only if "ReadLengthReadFilter" is specified:
--max-read-length <Integer>   Keep only reads with length at most equal to the specified value  Required. 

--min-read-length <Integer>   Keep only reads with length at least equal to the specified value  Default value: 1. 

Valid only if "ReadNameReadFilter" is specified:
--read-name <String>          Keep only reads with this read name  This argument must be specified at least once.
                              Required. 

Valid only if "ReadStrandFilter" is specified:
--keep-reverse-strand-only <Boolean>
                              Keep only reads on the reverse strand  Required. Possible values: {true, false} 

Valid only if "ReadTagValueFilter" is specified:
--read-filter-tag <String>    Look for this tag in read  Required. 

--read-filter-tag-comp <Float>Compare value in tag to this value  Default value: 0.0. 

--read-filter-tag-op <Operator>
                              Compare value in tag to value with this operator. If T is the value in the tag, OP is the
                              operation provided, and V is the value in read-filter-tag, then the read will pass the
                              filter iff T OP V is true.  Default value: EQUAL. Possible values: {LESS, LESS_OR_EQUAL,
                              GREATER, GREATER_OR_EQUAL, EQUAL, NOT_EQUAL} 

Valid only if "SampleReadFilter" is specified:
--sample <String>             The name of the sample(s) to keep, filtering out all others  This argument must be
                              specified at least once. Required. 

Valid only if "SoftClippedReadFilter" is specified:
--invert-soft-clip-ratio-filter <Boolean>
                              Inverts the results from this filter, causing all variants that would pass to fail and
                              visa-versa.  Default value: false. Possible values: {true, false} 

--soft-clipped-leading-trailing-ratio <Double>
                              Threshold ratio of soft clipped bases (leading / trailing the cigar string) to total bases
                              in read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumSoftClippedRatio

--soft-clipped-ratio-threshold <Double>
                              Threshold ratio of soft clipped bases (anywhere in the cigar string) to total bases in
                              read for read to be filtered.  Default value: null.  Cannot be used in conjunction with
                              argument(s) minimumLeadingTrailingSoftClippedRatio


***********************************************************************

A USER ERROR has occurred: Illegal argument value: Positional arguments were provided ',Variant{Calling:{Calls{variants{using{GATK{HaplotypeCaller.{Error{in{Variant{Calling.{Exiting.}' but no positional argument is defined for this tool.

***********************************************************************
Set the system property GATK_STACKTRACE_ON_USER_EXCEPTION (--java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true') to print the stack trace.
Error in Count Variants. Exiting.
